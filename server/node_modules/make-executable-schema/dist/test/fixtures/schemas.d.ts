import { PubSub } from 'graphql-subscriptions';
import { GraphQLSchema, GraphQLError } from 'graphql';
import { SubschemaConfig } from '../../Interfaces';
export declare class CustomError extends GraphQLError {
    constructor(message: string, extensions: Record<string, any>);
}
export declare type Location = {
    name: string;
    coordinates: string;
};
export declare type Property = {
    id: string;
    name: string;
    location: Location;
};
export declare type Product = {
    id: string;
    price?: number;
    url?: string;
    type: string;
};
export declare type Booking = {
    id: string;
    propertyId: string;
    customerId: string;
    startTime: string;
    endTime: string;
};
export declare type Customer = {
    id: string;
    email: string;
    name: string;
    address?: string;
    vehicleId?: string;
};
export declare type Vehicle = {
    id: string;
    licensePlate?: string;
    bikeType?: 'MOUNTAIN' | 'ROAD';
};
export declare const sampleData: {
    Property: Record<string, Property>;
    Product: Record<string, Product>;
    Booking: Record<string, Booking>;
    Customer: Record<string, Customer>;
    Vehicle: Record<string, Vehicle>;
};
export declare const subscriptionPubSub: PubSub;
export declare const subscriptionPubSubTrigger = "pubSubTrigger";
export declare const propertySchema: GraphQLSchema;
export declare const productSchema: GraphQLSchema;
export declare const bookingSchema: GraphQLSchema;
export declare const subscriptionSchema: GraphQLSchema;
export declare function makeSchemaRemote(schema: GraphQLSchema): Promise<SubschemaConfig>;
export declare const remotePropertySchema: Promise<SubschemaConfig>;
export declare const remoteProductSchema: Promise<SubschemaConfig>;
export declare const remoteBookingSchema: Promise<SubschemaConfig>;
