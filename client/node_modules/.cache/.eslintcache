[{"/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/index.tsx":"1","/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/reportWebVitals.ts":"2","/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/App.tsx":"3","/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/contexts/index.ts":"4","/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/AddTodo.tsx":"5","/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/Todos.tsx":"6","/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/contexts/contexts.tsx":"7","/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/__generated__/AddTodoMutation.graphql.ts":"8","/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/__generated__/TodosQuery.graphql.ts":"9","/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/__generated__/TodosToggleTodoMutation.graphql.ts":"10","/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/contexts/relay/index.ts":"11","/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/contexts/relay/environment.tsx":"12","/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/contexts/relay/context.tsx":"13"},{"size":577,"mtime":1628814145494,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1628807827382,"results":"16","hashOfConfig":"15"},{"size":246,"mtime":1628837209441,"results":"17","hashOfConfig":"15"},{"size":37,"mtime":1628812891118,"results":"18","hashOfConfig":"15"},{"size":1242,"mtime":1628837206744,"results":"19","hashOfConfig":"15"},{"size":2464,"mtime":1628837572741,"results":"20","hashOfConfig":"15"},{"size":275,"mtime":1628812931305,"results":"21","hashOfConfig":"15"},{"size":2364,"mtime":1628836745745,"results":"22","hashOfConfig":"15"},{"size":1935,"mtime":1628836745744,"results":"23","hashOfConfig":"15"},{"size":2376,"mtime":1628837583730,"results":"24","hashOfConfig":"15"},{"size":66,"mtime":1628811128082,"results":"25","hashOfConfig":"15"},{"size":1906,"mtime":1628812933050,"results":"26","hashOfConfig":"15"},{"size":521,"mtime":1628812935229,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10n5g8m",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/index.tsx",[],"/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/reportWebVitals.ts",[],"/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/App.tsx",[],"/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/contexts/index.ts",[],"/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/AddTodo.tsx",["57"],"import React, { useState } from 'react'\nimport { commitMutation } from \"react-relay\"\nimport { useRelayEnvironment } from \"react-relay/hooks\"\nimport graphql from \"babel-plugin-relay/macro\"\n\nconst AddTodoMutation = graphql`\n  mutation AddTodoMutation(\n    $description: String!\n  ) {\n    newTodo(description: $description) {\n      _id\n      description\n      completed\n    }\n  }\n`\n\nexport type Props = {\n\n}\n\nexport const AddTodo = ({\n\n}: Props) => {\n  const environment = useRelayEnvironment()\n  const [description, setDescription] = useState('')\n\n  return (\n    <div className=\"addTodoWrapper\">\n      <form\n        onSubmit={() => {\n          commitMutation(environment, {\n            mutation: AddTodoMutation,\n            variables: {\n              description\n            },\n            onCompleted: (_response, errors) => {\n              if (errors) {\n                console.error(errors);\n              }\n\n              setDescription('')\n            },\n            onError: err => console.error(err)\n          });\n        }}\n      >\n        <input type=\"text\" value={description} onChange={e => { setDescription(e.target.value) }} placeholder=\"New Todo\" />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n    </div>\n  )\n}\n","/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/Todos.tsx",["58"],"import React from 'react'\nimport { useRelayEnvironment } from 'react-relay/hooks'\nimport { commitMutation } from \"react-relay\"\nimport graphql from 'babel-plugin-relay/macro'\nimport {\n  QueryRenderer,\n} from 'react-relay'\nimport {\n  TodosQueryResponse\n} from './__generated__/TodosQuery.graphql'\n\nconst CompleteTodoMutation = graphql`\n  mutation TodosToggleTodoMutation(\n    $_id: String!\n  ) {\n    toggleTodo(_id: $_id) {\n      _id\n      description\n      completed\n    }\n  }\n`\n\nexport type Props = {\n\n}\n\nexport const Todos = ({\n\n}: Props) => {\n  const environment = useRelayEnvironment()\n\n  const toggleTodo = (_id: string) => {\n    commitMutation(environment, {\n      mutation: CompleteTodoMutation,\n      variables: {\n        _id\n      },\n      onCompleted: (_response, errors) => {\n        if (errors) {\n          console.error(errors);\n        }\n      },\n      onError: err => console.error(err)\n    });\n  }\n\n  return (\n    <>\n      <QueryRenderer\n        environment={environment}\n        query={graphql`\n          query TodosQuery {\n            todos {\n              _id\n              description\n              completed\n            }\n          }\n        `}\n        variables={{}}\n        render={({ error, props }) => {\n          if (error) {\n            console.error(error)\n            return <>Error: {error.message}</>\n          }\n\n          if (!props) {\n            return <>Loading...</>\n          }\n\n          return (\n            <table>\n              <thead>\n                <tr>\n                  <th>\n                    Description\n                  </th>\n                  <th>\n                    Completed\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {(props as TodosQueryResponse).todos.map((todo, idx) => {\n                  return (\n                    <tr\n                      key={idx}\n                    >\n                      <td>\n                        <button\n                          onClick={() => {\n                            toggleTodo(todo._id)\n                          }}\n                        >\n                          Toggle Complete\n                        </button>\n                      </td>\n                      <td>{todo.description}</td>\n                      <td>{todo.completed}</td>\n                    </tr>\n                  )\n                })}\n              </tbody>\n            </table>\n          )\n        }}\n      />\n    </>\n  )\n}\n","/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/contexts/contexts.tsx",[],"/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/__generated__/AddTodoMutation.graphql.ts",[],"/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/__generated__/TodosQuery.graphql.ts",[],"/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/__generated__/TodosToggleTodoMutation.graphql.ts",[],"/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/contexts/relay/index.ts",[],"/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/contexts/relay/environment.tsx",[],"/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/contexts/relay/context.tsx",["59","60","61","62"],"import React, { useContext, useEffect, useState, PropsWithChildren } from 'react'\nimport { RelayEnvironmentProvider } from 'react-relay/hooks'\nimport {\n  Environment,\n} from 'relay-runtime'\n\nimport { getEnvironment } from './environment'\n\ninterface IProps { }\n\nconst RelayContext = ({ children }: PropsWithChildren<IProps>) => {\n  const environment = getEnvironment()\n\n  return (\n    <RelayEnvironmentProvider environment={environment}>\n      {children}\n    </RelayEnvironmentProvider>\n  )\n}\n\nexport default RelayContext\n",{"ruleId":"63","severity":1,"message":"64","line":22,"column":25,"nodeType":"65","messageId":"66","endLine":24,"endColumn":9},{"ruleId":"63","severity":1,"message":"64","line":28,"column":23,"nodeType":"65","messageId":"66","endLine":30,"endColumn":9},{"ruleId":"67","severity":1,"message":"68","line":1,"column":17,"nodeType":"69","messageId":"70","endLine":1,"endColumn":27},{"ruleId":"67","severity":1,"message":"71","line":1,"column":29,"nodeType":"69","messageId":"70","endLine":1,"endColumn":38},{"ruleId":"67","severity":1,"message":"72","line":1,"column":40,"nodeType":"69","messageId":"70","endLine":1,"endColumn":48},{"ruleId":"67","severity":1,"message":"73","line":4,"column":3,"nodeType":"69","messageId":"70","endLine":4,"endColumn":14},"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","@typescript-eslint/no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'Environment' is defined but never used."]