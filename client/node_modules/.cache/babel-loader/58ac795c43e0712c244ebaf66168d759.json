{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require('invariant');\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar _require = require('../util/RelayConcreteNode'),\n    CONDITION = _require.CONDITION,\n    CLIENT_COMPONENT = _require.CLIENT_COMPONENT,\n    CLIENT_EXTENSION = _require.CLIENT_EXTENSION,\n    DEFER = _require.DEFER,\n    FLIGHT_FIELD = _require.FLIGHT_FIELD,\n    FRAGMENT_SPREAD = _require.FRAGMENT_SPREAD,\n    INLINE_FRAGMENT = _require.INLINE_FRAGMENT,\n    LINKED_FIELD = _require.LINKED_FIELD,\n    LINKED_HANDLE = _require.LINKED_HANDLE,\n    MODULE_IMPORT = _require.MODULE_IMPORT,\n    SCALAR_FIELD = _require.SCALAR_FIELD,\n    SCALAR_HANDLE = _require.SCALAR_HANDLE,\n    STREAM = _require.STREAM,\n    TYPE_DISCRIMINATOR = _require.TYPE_DISCRIMINATOR;\n\nvar _require2 = require('./ClientID'),\n    generateClientID = _require2.generateClientID,\n    isClientID = _require2.isClientID;\n\nvar _require3 = require('./RelayModernSelector'),\n    createNormalizationSelector = _require3.createNormalizationSelector;\n\nvar _require4 = require('./RelayStoreReactFlightUtils'),\n    refineToReactFlightPayloadData = _require4.refineToReactFlightPayloadData,\n    REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY = _require4.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY,\n    REACT_FLIGHT_TREE_STORAGE_KEY = _require4.REACT_FLIGHT_TREE_STORAGE_KEY,\n    REACT_FLIGHT_TYPE_NAME = _require4.REACT_FLIGHT_TYPE_NAME;\n\nvar _require5 = require('./RelayStoreUtils'),\n    getArgumentValues = _require5.getArgumentValues,\n    getHandleStorageKey = _require5.getHandleStorageKey,\n    getModuleComponentKey = _require5.getModuleComponentKey,\n    getModuleOperationKey = _require5.getModuleOperationKey,\n    getStorageKey = _require5.getStorageKey,\n    TYPENAME_KEY = _require5.TYPENAME_KEY,\n    ROOT_ID = _require5.ROOT_ID,\n    ROOT_TYPE = _require5.ROOT_TYPE;\n\nvar _require6 = require('./TypeID'),\n    generateTypeID = _require6.generateTypeID,\n    TYPE_SCHEMA_TYPE = _require6.TYPE_SCHEMA_TYPE;\n/**\n * Normalizes the results of a query and standard GraphQL response, writing the\n * normalized records/fields into the given MutableRecordSource.\n */\n\n\nfunction normalize(recordSource, selector, response, options) {\n  var dataID = selector.dataID,\n      node = selector.node,\n      variables = selector.variables;\n  var normalizer = new RelayResponseNormalizer(recordSource, variables, options);\n  return normalizer.normalizeResponse(node, dataID, response);\n}\n/**\n * @private\n *\n * Helper for handling payloads.\n */\n\n\nvar RelayResponseNormalizer = /*#__PURE__*/function () {\n  function RelayResponseNormalizer(recordSource, variables, options) {\n    this._getDataId = options.getDataID;\n    this._handleFieldPayloads = [];\n    this._treatMissingFieldsAsNull = options.treatMissingFieldsAsNull;\n    this._incrementalPlaceholders = [];\n    this._isClientExtension = false;\n    this._isUnmatchedAbstractType = false;\n    this._moduleImportPayloads = [];\n    this._path = options.path ? (0, _toConsumableArray2[\"default\"])(options.path) : [];\n    this._recordSource = recordSource;\n    this._variables = variables;\n    this._reactFlightPayloadDeserializer = options.reactFlightPayloadDeserializer;\n    this._reactFlightServerErrorHandler = options.reactFlightServerErrorHandler;\n    this._shouldProcessClientComponents = options.shouldProcessClientComponents;\n  }\n\n  var _proto = RelayResponseNormalizer.prototype;\n\n  _proto.normalizeResponse = function normalizeResponse(node, dataID, data) {\n    var record = this._recordSource.get(dataID);\n\n    !record ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected root record `%s` to exist.', dataID) : invariant(false) : void 0;\n\n    this._traverseSelections(node, record, data);\n\n    return {\n      errors: null,\n      fieldPayloads: this._handleFieldPayloads,\n      incrementalPlaceholders: this._incrementalPlaceholders,\n      moduleImportPayloads: this._moduleImportPayloads,\n      source: this._recordSource,\n      isFinal: false\n    };\n  };\n\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Undefined variable `%s`.', name) : invariant(false) : void 0; // $FlowFixMe[cannot-write]\n\n    return this._variables[name];\n  };\n\n  _proto._getRecordType = function _getRecordType(data) {\n    var typeName = data[TYPENAME_KEY];\n    !(typeName != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected a typename for record `%s`.', JSON.stringify(data, null, 2)) : invariant(false) : void 0;\n    return typeName;\n  };\n\n  _proto._traverseSelections = function _traverseSelections(node, record, data) {\n    for (var i = 0; i < node.selections.length; i++) {\n      var selection = node.selections[i];\n\n      switch (selection.kind) {\n        case SCALAR_FIELD:\n        case LINKED_FIELD:\n          this._normalizeField(node, selection, record, data);\n\n          break;\n\n        case CONDITION:\n          var conditionValue = this._getVariableValue(selection.condition);\n\n          if (conditionValue === selection.passingValue) {\n            this._traverseSelections(selection, record, data);\n          }\n\n          break;\n\n        case FRAGMENT_SPREAD:\n          {\n            this._traverseSelections(selection.fragment, record, data);\n\n            break;\n          }\n\n        case INLINE_FRAGMENT:\n          {\n            var abstractKey = selection.abstractKey;\n\n            if (abstractKey == null) {\n              var _typeName = RelayModernRecord.getType(record);\n\n              if (_typeName === selection.type) {\n                this._traverseSelections(selection, record, data);\n              }\n            } else if (RelayFeatureFlags.ENABLE_PRECISE_TYPE_REFINEMENT) {\n              var implementsInterface = data.hasOwnProperty(abstractKey);\n\n              var _typeName2 = RelayModernRecord.getType(record);\n\n              var typeID = generateTypeID(_typeName2);\n\n              var typeRecord = this._recordSource.get(typeID);\n\n              if (typeRecord == null) {\n                typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);\n\n                this._recordSource.set(typeID, typeRecord);\n              }\n\n              RelayModernRecord.setValue(typeRecord, abstractKey, implementsInterface);\n\n              if (implementsInterface) {\n                this._traverseSelections(selection, record, data);\n              }\n            } else {\n              // legacy behavior for abstract refinements: always normalize even\n              // if the type doesn't conform, but track if the type matches or not\n              // for determining whether response fields are expected to be present\n              var _implementsInterface = data.hasOwnProperty(abstractKey);\n\n              var parentIsUnmatchedAbstractType = this._isUnmatchedAbstractType;\n              this._isUnmatchedAbstractType = this._isUnmatchedAbstractType || !_implementsInterface;\n\n              this._traverseSelections(selection, record, data);\n\n              this._isUnmatchedAbstractType = parentIsUnmatchedAbstractType;\n            }\n\n            break;\n          }\n\n        case TYPE_DISCRIMINATOR:\n          {\n            if (RelayFeatureFlags.ENABLE_PRECISE_TYPE_REFINEMENT) {\n              var _abstractKey = selection.abstractKey;\n\n              var _implementsInterface2 = data.hasOwnProperty(_abstractKey);\n\n              var _typeName3 = RelayModernRecord.getType(record);\n\n              var _typeID = generateTypeID(_typeName3);\n\n              var _typeRecord = this._recordSource.get(_typeID);\n\n              if (_typeRecord == null) {\n                _typeRecord = RelayModernRecord.create(_typeID, TYPE_SCHEMA_TYPE);\n\n                this._recordSource.set(_typeID, _typeRecord);\n              }\n\n              RelayModernRecord.setValue(_typeRecord, _abstractKey, _implementsInterface2);\n            }\n\n            break;\n          }\n\n        case LINKED_HANDLE:\n        case SCALAR_HANDLE:\n          var args = selection.args ? getArgumentValues(selection.args, this._variables) : {};\n          var fieldKey = getStorageKey(selection, this._variables);\n          var handleKey = getHandleStorageKey(selection, this._variables);\n\n          this._handleFieldPayloads.push({\n            args: args,\n            dataID: RelayModernRecord.getDataID(record),\n            fieldKey: fieldKey,\n            handle: selection.handle,\n            handleKey: handleKey,\n            handleArgs: selection.handleArgs ? getArgumentValues(selection.handleArgs, this._variables) : {}\n          });\n\n          break;\n\n        case MODULE_IMPORT:\n          this._normalizeModuleImport(node, selection, record, data);\n\n          break;\n\n        case DEFER:\n          this._normalizeDefer(selection, record, data);\n\n          break;\n\n        case STREAM:\n          this._normalizeStream(selection, record, data);\n\n          break;\n\n        case CLIENT_EXTENSION:\n          var isClientExtension = this._isClientExtension;\n          this._isClientExtension = true;\n\n          this._traverseSelections(selection, record, data);\n\n          this._isClientExtension = isClientExtension;\n          break;\n\n        case CLIENT_COMPONENT:\n          if (this._shouldProcessClientComponents === false) {\n            break;\n          }\n\n          this._traverseSelections(selection.fragment, record, data);\n\n          break;\n\n        case FLIGHT_FIELD:\n          if (RelayFeatureFlags.ENABLE_REACT_FLIGHT_COMPONENT_FIELD) {\n            this._normalizeFlightField(node, selection, record, data);\n          } else {\n            throw new Error('Flight fields are not yet supported.');\n          }\n\n          break;\n\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    }\n  };\n\n  _proto._normalizeDefer = function _normalizeDefer(defer, record, data) {\n    var isDeferred = defer[\"if\"] === null || this._getVariableValue(defer[\"if\"]);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isDeferred === 'boolean', 'RelayResponseNormalizer: Expected value for @defer `if` argument to ' + 'be a boolean, got `%s`.', isDeferred) : void 0;\n    }\n\n    if (isDeferred === false) {\n      // If defer is disabled there will be no additional response chunk:\n      // normalize the data already present.\n      this._traverseSelections(defer, record, data);\n    } else {\n      // Otherwise data *for this selection* should not be present: enqueue\n      // metadata to process the subsequent response chunk.\n      this._incrementalPlaceholders.push({\n        kind: 'defer',\n        data: data,\n        label: defer.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        selector: createNormalizationSelector(defer, RelayModernRecord.getDataID(record), this._variables),\n        typeName: RelayModernRecord.getType(record)\n      });\n    }\n  };\n\n  _proto._normalizeStream = function _normalizeStream(stream, record, data) {\n    // Always normalize regardless of whether streaming is enabled or not,\n    // this populates the initial array value (including any items when\n    // initial_count > 0).\n    this._traverseSelections(stream, record, data);\n\n    var isStreamed = stream[\"if\"] === null || this._getVariableValue(stream[\"if\"]);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isStreamed === 'boolean', 'RelayResponseNormalizer: Expected value for @stream `if` argument ' + 'to be a boolean, got `%s`.', isStreamed) : void 0;\n    }\n\n    if (isStreamed === true) {\n      // If streaming is enabled, *also* emit metadata to process any\n      // response chunks that may be delivered.\n      this._incrementalPlaceholders.push({\n        kind: 'stream',\n        label: stream.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        parentID: RelayModernRecord.getDataID(record),\n        node: stream,\n        variables: this._variables\n      });\n    }\n  };\n\n  _proto._normalizeModuleImport = function _normalizeModuleImport(parent, moduleImport, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for @module to be an object.') : invariant(false) : void 0;\n    var typeName = RelayModernRecord.getType(record);\n    var componentKey = getModuleComponentKey(moduleImport.documentName);\n    var componentReference = data[componentKey];\n    RelayModernRecord.setValue(record, componentKey, componentReference !== null && componentReference !== void 0 ? componentReference : null);\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = data[operationKey];\n    RelayModernRecord.setValue(record, operationKey, operationReference !== null && operationReference !== void 0 ? operationReference : null);\n\n    if (operationReference != null) {\n      this._moduleImportPayloads.push({\n        data: data,\n        dataID: RelayModernRecord.getDataID(record),\n        operationReference: operationReference,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        typeName: typeName,\n        variables: this._variables\n      });\n    }\n  };\n\n  _proto._normalizeField = function _normalizeField(parent, selection, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'writeField(): Expected data for field `%s` to be an object.', selection.name) : invariant(false) : void 0;\n    var responseKey = selection.alias || selection.name;\n    var storageKey = getStorageKey(selection, this._variables);\n    var fieldValue = data[responseKey];\n\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        // Fields may be missing in the response in two main cases:\n        // - Inside a client extension: the server will not generally return\n        //   values for these fields, but a local update may provide them.\n        // - Inside an abstract type refinement where the concrete type does\n        //   not conform to the interface/union.\n        // However an otherwise-required field may also be missing if the server\n        // is configured to skip fields with `null` values, in which case the\n        // client is assumed to be correctly configured with\n        // treatMissingFieldsAsNull=true.\n        var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;\n\n        if (isOptionalField) {\n          // Field not expected to exist regardless of whether the server is pruning null\n          // fields or not.\n          return;\n        } else if (!this._treatMissingFieldsAsNull) {\n          // Not optional and the server is not pruning null fields: field is expected\n          // to be present\n          if (process.env.NODE_ENV !== \"production\") {\n            process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n          }\n\n          return;\n        }\n      }\n\n      if (process.env.NODE_ENV !== \"production\") {\n        if (selection.kind === SCALAR_FIELD) {\n          this._validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue);\n        }\n      }\n\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n\n    if (selection.kind === SCALAR_FIELD) {\n      if (process.env.NODE_ENV !== \"production\") {\n        this._validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue);\n      }\n\n      RelayModernRecord.setValue(record, storageKey, fieldValue);\n    } else if (selection.kind === LINKED_FIELD) {\n      this._path.push(responseKey);\n\n      if (selection.plural) {\n        this._normalizePluralLink(selection, record, storageKey, fieldValue);\n      } else {\n        this._normalizeLink(selection, record, storageKey, fieldValue);\n      }\n\n      this._path.pop();\n    } else {\n      selection;\n      !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s` during normalization.', selection.kind) : invariant(false) : void 0;\n    }\n  };\n\n  _proto._normalizeFlightField = function _normalizeFlightField(parent, selection, record, data) {\n    var responseKey = selection.alias || selection.name;\n    var storageKey = getStorageKey(selection, this._variables);\n    var fieldValue = data[responseKey];\n\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        // Flight field may be missing in the response if:\n        // - It is inside an abstract type refinement where the concrete type does\n        //   not conform to the interface/union.\n        // However an otherwise-required field may also be missing if the server\n        // is configured to skip fields with `null` values, in which case the\n        // client is assumed to be correctly configured with\n        // treatMissingFieldsAsNull=true.\n        if (this._isUnmatchedAbstractType) {\n          // Field not expected to exist regardless of whether the server is pruning null\n          // fields or not.\n          return;\n        } else if (!this._treatMissingFieldsAsNull) {\n          // Not optional and the server is not pruning null fields: field is expected\n          // to be present\n          if (process.env.NODE_ENV !== \"production\") {\n            process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n          }\n\n          return;\n        }\n      }\n\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n\n    var reactFlightPayload = refineToReactFlightPayloadData(fieldValue);\n    var reactFlightPayloadDeserializer = this._reactFlightPayloadDeserializer;\n    !(reactFlightPayload != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected React Flight payload data to be an ' + 'object with `status`, tree`, `queries` and `errors` properties, got ' + '`%s`.', fieldValue) : invariant(false) : void 0;\n    !(typeof reactFlightPayloadDeserializer === 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected reactFlightPayloadDeserializer to ' + 'be a function, got `%s`.', reactFlightPayloadDeserializer) : invariant(false) : void 0;\n\n    if (reactFlightPayload.errors.length > 0) {\n      if (typeof this._reactFlightServerErrorHandler === 'function') {\n        this._reactFlightServerErrorHandler(reactFlightPayload.status, reactFlightPayload.errors);\n      } else {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Received server errors for field `%s`.\\n\\n' + '%s\\n%s', responseKey, reactFlightPayload.errors[0].message, reactFlightPayload.errors[0].stack) : void 0;\n      }\n    }\n\n    var reactFlightID = generateClientID(RelayModernRecord.getDataID(record), getStorageKey(selection, this._variables));\n\n    var reactFlightClientResponseRecord = this._recordSource.get(reactFlightID);\n\n    if (reactFlightClientResponseRecord == null) {\n      reactFlightClientResponseRecord = RelayModernRecord.create(reactFlightID, REACT_FLIGHT_TYPE_NAME);\n\n      this._recordSource.set(reactFlightID, reactFlightClientResponseRecord);\n    }\n\n    if (reactFlightPayload.tree == null) {\n      // This typically indicates that a fatal server error prevented rows from\n      // being written. When this occurs, we should not continue normalization of\n      // the Flight field because the row response is malformed.\n      //\n      // Receiving empty rows is OK because it can indicate the start of a stream.\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Expected `tree` not to be null. This ' + 'typically indicates that a fatal server error prevented any Server ' + 'Component rows from being written.') : void 0; // We create the flight record with a null value for the tree\n      // and empty reachable definitions\n\n      RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_TREE_STORAGE_KEY, null);\n      RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY, []);\n      RelayModernRecord.setLinkedRecordID(record, storageKey, reactFlightID);\n      return;\n    } // We store the deserialized reactFlightClientResponse in a separate\n    // record and link it to the parent record. This is so we can GC the Flight\n    // tree later even if the parent record is still reachable.\n\n\n    var reactFlightClientResponse = reactFlightPayloadDeserializer(reactFlightPayload.tree);\n    RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_TREE_STORAGE_KEY, reactFlightClientResponse);\n    var reachableExecutableDefinitions = [];\n\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(reactFlightPayload.queries),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var query = _step.value;\n\n        if (query.response.data != null) {\n          this._moduleImportPayloads.push({\n            data: query.response.data,\n            dataID: ROOT_ID,\n            operationReference: query.module,\n            path: [],\n            typeName: ROOT_TYPE,\n            variables: query.variables\n          });\n        }\n\n        reachableExecutableDefinitions.push({\n          module: query.module,\n          variables: query.variables\n        });\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(reactFlightPayload.fragments),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var fragment = _step2.value;\n\n        if (fragment.response.data != null) {\n          this._moduleImportPayloads.push({\n            data: fragment.response.data,\n            dataID: fragment.__id,\n            operationReference: fragment.module,\n            path: [],\n            typeName: fragment.__typename,\n            variables: fragment.variables\n          });\n        }\n\n        reachableExecutableDefinitions.push({\n          module: fragment.module,\n          variables: fragment.variables\n        });\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY, reachableExecutableDefinitions);\n    RelayModernRecord.setLinkedRecordID(record, storageKey, reactFlightID);\n  };\n\n  _proto._normalizeLink = function _normalizeLink(field, record, storageKey, fieldValue) {\n    var _field$concreteType;\n\n    !(typeof fieldValue === 'object' && fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an object.', storageKey) : invariant(false) : void 0;\n    var nextID = this._getDataId( // $FlowFixMe[incompatible-variance]\n    fieldValue, // $FlowFixMe[incompatible-variance]\n    (_field$concreteType = field.concreteType) !== null && _field$concreteType !== void 0 ? _field$concreteType : this._getRecordType(fieldValue)) || // Reuse previously generated client IDs\n    RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);\n    !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : invariant(false) : void 0;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      this._validateConflictingLinkedFieldsWithIdenticalId(record, RelayModernRecord.getLinkedRecordID(record, storageKey), nextID, storageKey);\n    }\n\n    RelayModernRecord.setLinkedRecordID(record, storageKey, nextID);\n\n    var nextRecord = this._recordSource.get(nextID);\n\n    if (!nextRecord) {\n      // $FlowFixMe[incompatible-variance]\n      var _typeName4 = field.concreteType || this._getRecordType(fieldValue);\n\n      nextRecord = RelayModernRecord.create(nextID, _typeName4);\n\n      this._recordSource.set(nextID, nextRecord);\n    } else if (process.env.NODE_ENV !== \"production\") {\n      this._validateRecordType(nextRecord, field, fieldValue);\n    } // $FlowFixMe[incompatible-variance]\n\n\n    this._traverseSelections(field, nextRecord, fieldValue);\n  };\n\n  _proto._normalizePluralLink = function _normalizePluralLink(field, record, storageKey, fieldValue) {\n    var _this = this;\n\n    !Array.isArray(fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an array ' + 'of objects.', storageKey) : invariant(false) : void 0;\n    var prevIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n    var nextIDs = [];\n    fieldValue.forEach(function (item, nextIndex) {\n      var _field$concreteType2; // validate response data\n\n\n      if (item == null) {\n        nextIDs.push(item);\n        return;\n      }\n\n      _this._path.push(String(nextIndex));\n\n      !(typeof item === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected elements for field `%s` to be ' + 'objects.', storageKey) : invariant(false) : void 0;\n      var nextID = _this._getDataId( // $FlowFixMe[incompatible-variance]\n      item, // $FlowFixMe[incompatible-variance]\n      (_field$concreteType2 = field.concreteType) !== null && _field$concreteType2 !== void 0 ? _field$concreteType2 : _this._getRecordType(item)) || prevIDs && prevIDs[nextIndex] || // Reuse previously generated client IDs:\n      generateClientID(RelayModernRecord.getDataID(record), storageKey, nextIndex);\n      !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id of elements of field `%s` to ' + 'be strings.', storageKey) : invariant(false) : void 0;\n      nextIDs.push(nextID);\n\n      var nextRecord = _this._recordSource.get(nextID);\n\n      if (!nextRecord) {\n        // $FlowFixMe[incompatible-variance]\n        var _typeName5 = field.concreteType || _this._getRecordType(item);\n\n        nextRecord = RelayModernRecord.create(nextID, _typeName5);\n\n        _this._recordSource.set(nextID, nextRecord);\n      } else if (process.env.NODE_ENV !== \"production\") {\n        _this._validateRecordType(nextRecord, field, item);\n      } // NOTE: the check to strip __DEV__ code only works for simple\n      // `if (__DEV__)`\n\n\n      if (process.env.NODE_ENV !== \"production\") {\n        if (prevIDs) {\n          _this._validateConflictingLinkedFieldsWithIdenticalId(record, prevIDs[nextIndex], nextID, storageKey);\n        }\n      } // $FlowFixMe[incompatible-variance]\n\n\n      _this._traverseSelections(field, nextRecord, item);\n\n      _this._path.pop();\n    });\n    RelayModernRecord.setLinkedRecordIDs(record, storageKey, nextIDs);\n  }\n  /**\n   * Warns if the type of the record does not match the type of the field/payload.\n   */\n  ;\n\n  _proto._validateRecordType = function _validateRecordType(record, field, payload) {\n    var _field$concreteType3;\n\n    var typeName = (_field$concreteType3 = field.concreteType) !== null && _field$concreteType3 !== void 0 ? _field$concreteType3 : this._getRecordType(payload);\n    var dataID = RelayModernRecord.getDataID(record);\n    process.env.NODE_ENV !== \"production\" ? warning(isClientID(dataID) && dataID !== ROOT_ID || RelayModernRecord.getType(record) === typeName, 'RelayResponseNormalizer: Invalid record `%s`. Expected %s to be ' + 'consistent, but the record was assigned conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', dataID, TYPENAME_KEY, RelayModernRecord.getType(record), typeName) : void 0;\n  }\n  /**\n   * Warns if a single response contains conflicting fields with the same id\n   */\n  ;\n\n  _proto._validateConflictingFieldsWithIdenticalId = function _validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue) {\n    // NOTE: Only call this function in DEV\n    if (process.env.NODE_ENV !== \"production\") {\n      var dataID = RelayModernRecord.getDataID(record);\n      var previousValue = RelayModernRecord.getValue(record, storageKey);\n      process.env.NODE_ENV !== \"production\" ? warning(storageKey === TYPENAME_KEY || previousValue === undefined || areEqual(previousValue, fieldValue), 'RelayResponseNormalizer: Invalid record. The record contains two ' + 'instances of the same id: `%s` with conflicting field, %s and its values: %s and %s. ' + 'If two fields are different but share ' + 'the same id, one field will overwrite the other.', dataID, storageKey, previousValue, fieldValue) : void 0;\n    }\n  }\n  /**\n   * Warns if a single response contains conflicting fields with the same id\n   */\n  ;\n\n  _proto._validateConflictingLinkedFieldsWithIdenticalId = function _validateConflictingLinkedFieldsWithIdenticalId(record, prevID, nextID, storageKey) {\n    // NOTE: Only call this function in DEV\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(prevID === undefined || prevID === nextID, 'RelayResponseNormalizer: Invalid record. The record contains ' + 'references to the conflicting field, %s and its id values: %s and %s. ' + 'We need to make sure that the record the field points ' + 'to remains consistent or one field will overwrite the other.', storageKey, prevID, nextID) : void 0;\n    }\n  };\n\n  return RelayResponseNormalizer;\n}();\n\nmodule.exports = {\n  normalize: normalize\n};","map":{"version":3,"sources":["/home/adamhanna/apps/relay-mongo-subscriptions-example/client/node_modules/relay-runtime/lib/store/RelayResponseNormalizer.js"],"names":["_interopRequireDefault","require","_createForOfIteratorHelper2","_toConsumableArray2","RelayFeatureFlags","RelayModernRecord","areEqual","invariant","warning","_require","CONDITION","CLIENT_COMPONENT","CLIENT_EXTENSION","DEFER","FLIGHT_FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT","LINKED_FIELD","LINKED_HANDLE","MODULE_IMPORT","SCALAR_FIELD","SCALAR_HANDLE","STREAM","TYPE_DISCRIMINATOR","_require2","generateClientID","isClientID","_require3","createNormalizationSelector","_require4","refineToReactFlightPayloadData","REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY","REACT_FLIGHT_TREE_STORAGE_KEY","REACT_FLIGHT_TYPE_NAME","_require5","getArgumentValues","getHandleStorageKey","getModuleComponentKey","getModuleOperationKey","getStorageKey","TYPENAME_KEY","ROOT_ID","ROOT_TYPE","_require6","generateTypeID","TYPE_SCHEMA_TYPE","normalize","recordSource","selector","response","options","dataID","node","variables","normalizer","RelayResponseNormalizer","normalizeResponse","_getDataId","getDataID","_handleFieldPayloads","_treatMissingFieldsAsNull","treatMissingFieldsAsNull","_incrementalPlaceholders","_isClientExtension","_isUnmatchedAbstractType","_moduleImportPayloads","_path","path","_recordSource","_variables","_reactFlightPayloadDeserializer","reactFlightPayloadDeserializer","_reactFlightServerErrorHandler","reactFlightServerErrorHandler","_shouldProcessClientComponents","shouldProcessClientComponents","_proto","prototype","data","record","get","process","env","NODE_ENV","_traverseSelections","errors","fieldPayloads","incrementalPlaceholders","moduleImportPayloads","source","isFinal","_getVariableValue","name","hasOwnProperty","_getRecordType","typeName","JSON","stringify","i","selections","length","selection","kind","_normalizeField","conditionValue","condition","passingValue","fragment","abstractKey","_typeName","getType","type","ENABLE_PRECISE_TYPE_REFINEMENT","implementsInterface","_typeName2","typeID","typeRecord","create","set","setValue","_implementsInterface","parentIsUnmatchedAbstractType","_abstractKey","_implementsInterface2","_typeName3","_typeID","_typeRecord","args","fieldKey","handleKey","push","handle","handleArgs","_normalizeModuleImport","_normalizeDefer","_normalizeStream","isClientExtension","ENABLE_REACT_FLIGHT_COMPONENT_FIELD","_normalizeFlightField","Error","defer","isDeferred","label","stream","isStreamed","parentID","parent","moduleImport","componentKey","documentName","componentReference","operationKey","operationReference","responseKey","alias","storageKey","fieldValue","undefined","isOptionalField","_validateConflictingFieldsWithIdenticalId","plural","_normalizePluralLink","_normalizeLink","pop","reactFlightPayload","status","message","stack","reactFlightID","reactFlightClientResponseRecord","tree","setLinkedRecordID","reactFlightClientResponse","reachableExecutableDefinitions","_iterator","queries","_step","s","n","done","query","value","module","err","e","f","_iterator2","fragments","_step2","__id","__typename","field","_field$concreteType","nextID","concreteType","getLinkedRecordID","_validateConflictingLinkedFieldsWithIdenticalId","nextRecord","_typeName4","_validateRecordType","_this","Array","isArray","prevIDs","getLinkedRecordIDs","nextIDs","forEach","item","nextIndex","_field$concreteType2","String","_typeName5","setLinkedRecordIDs","payload","_field$concreteType3","previousValue","getValue","prevID","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require('invariant');\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar _require = require('../util/RelayConcreteNode'),\n    CONDITION = _require.CONDITION,\n    CLIENT_COMPONENT = _require.CLIENT_COMPONENT,\n    CLIENT_EXTENSION = _require.CLIENT_EXTENSION,\n    DEFER = _require.DEFER,\n    FLIGHT_FIELD = _require.FLIGHT_FIELD,\n    FRAGMENT_SPREAD = _require.FRAGMENT_SPREAD,\n    INLINE_FRAGMENT = _require.INLINE_FRAGMENT,\n    LINKED_FIELD = _require.LINKED_FIELD,\n    LINKED_HANDLE = _require.LINKED_HANDLE,\n    MODULE_IMPORT = _require.MODULE_IMPORT,\n    SCALAR_FIELD = _require.SCALAR_FIELD,\n    SCALAR_HANDLE = _require.SCALAR_HANDLE,\n    STREAM = _require.STREAM,\n    TYPE_DISCRIMINATOR = _require.TYPE_DISCRIMINATOR;\n\nvar _require2 = require('./ClientID'),\n    generateClientID = _require2.generateClientID,\n    isClientID = _require2.isClientID;\n\nvar _require3 = require('./RelayModernSelector'),\n    createNormalizationSelector = _require3.createNormalizationSelector;\n\nvar _require4 = require('./RelayStoreReactFlightUtils'),\n    refineToReactFlightPayloadData = _require4.refineToReactFlightPayloadData,\n    REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY = _require4.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY,\n    REACT_FLIGHT_TREE_STORAGE_KEY = _require4.REACT_FLIGHT_TREE_STORAGE_KEY,\n    REACT_FLIGHT_TYPE_NAME = _require4.REACT_FLIGHT_TYPE_NAME;\n\nvar _require5 = require('./RelayStoreUtils'),\n    getArgumentValues = _require5.getArgumentValues,\n    getHandleStorageKey = _require5.getHandleStorageKey,\n    getModuleComponentKey = _require5.getModuleComponentKey,\n    getModuleOperationKey = _require5.getModuleOperationKey,\n    getStorageKey = _require5.getStorageKey,\n    TYPENAME_KEY = _require5.TYPENAME_KEY,\n    ROOT_ID = _require5.ROOT_ID,\n    ROOT_TYPE = _require5.ROOT_TYPE;\n\nvar _require6 = require('./TypeID'),\n    generateTypeID = _require6.generateTypeID,\n    TYPE_SCHEMA_TYPE = _require6.TYPE_SCHEMA_TYPE;\n\n/**\n * Normalizes the results of a query and standard GraphQL response, writing the\n * normalized records/fields into the given MutableRecordSource.\n */\nfunction normalize(recordSource, selector, response, options) {\n  var dataID = selector.dataID,\n      node = selector.node,\n      variables = selector.variables;\n  var normalizer = new RelayResponseNormalizer(recordSource, variables, options);\n  return normalizer.normalizeResponse(node, dataID, response);\n}\n/**\n * @private\n *\n * Helper for handling payloads.\n */\n\n\nvar RelayResponseNormalizer = /*#__PURE__*/function () {\n  function RelayResponseNormalizer(recordSource, variables, options) {\n    this._getDataId = options.getDataID;\n    this._handleFieldPayloads = [];\n    this._treatMissingFieldsAsNull = options.treatMissingFieldsAsNull;\n    this._incrementalPlaceholders = [];\n    this._isClientExtension = false;\n    this._isUnmatchedAbstractType = false;\n    this._moduleImportPayloads = [];\n    this._path = options.path ? (0, _toConsumableArray2[\"default\"])(options.path) : [];\n    this._recordSource = recordSource;\n    this._variables = variables;\n    this._reactFlightPayloadDeserializer = options.reactFlightPayloadDeserializer;\n    this._reactFlightServerErrorHandler = options.reactFlightServerErrorHandler;\n    this._shouldProcessClientComponents = options.shouldProcessClientComponents;\n  }\n\n  var _proto = RelayResponseNormalizer.prototype;\n\n  _proto.normalizeResponse = function normalizeResponse(node, dataID, data) {\n    var record = this._recordSource.get(dataID);\n\n    !record ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected root record `%s` to exist.', dataID) : invariant(false) : void 0;\n\n    this._traverseSelections(node, record, data);\n\n    return {\n      errors: null,\n      fieldPayloads: this._handleFieldPayloads,\n      incrementalPlaceholders: this._incrementalPlaceholders,\n      moduleImportPayloads: this._moduleImportPayloads,\n      source: this._recordSource,\n      isFinal: false\n    };\n  };\n\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Undefined variable `%s`.', name) : invariant(false) : void 0; // $FlowFixMe[cannot-write]\n\n    return this._variables[name];\n  };\n\n  _proto._getRecordType = function _getRecordType(data) {\n    var typeName = data[TYPENAME_KEY];\n    !(typeName != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected a typename for record `%s`.', JSON.stringify(data, null, 2)) : invariant(false) : void 0;\n    return typeName;\n  };\n\n  _proto._traverseSelections = function _traverseSelections(node, record, data) {\n    for (var i = 0; i < node.selections.length; i++) {\n      var selection = node.selections[i];\n\n      switch (selection.kind) {\n        case SCALAR_FIELD:\n        case LINKED_FIELD:\n          this._normalizeField(node, selection, record, data);\n\n          break;\n\n        case CONDITION:\n          var conditionValue = this._getVariableValue(selection.condition);\n\n          if (conditionValue === selection.passingValue) {\n            this._traverseSelections(selection, record, data);\n          }\n\n          break;\n\n        case FRAGMENT_SPREAD:\n          {\n            this._traverseSelections(selection.fragment, record, data);\n\n            break;\n          }\n\n        case INLINE_FRAGMENT:\n          {\n            var abstractKey = selection.abstractKey;\n\n            if (abstractKey == null) {\n              var _typeName = RelayModernRecord.getType(record);\n\n              if (_typeName === selection.type) {\n                this._traverseSelections(selection, record, data);\n              }\n            } else if (RelayFeatureFlags.ENABLE_PRECISE_TYPE_REFINEMENT) {\n              var implementsInterface = data.hasOwnProperty(abstractKey);\n\n              var _typeName2 = RelayModernRecord.getType(record);\n\n              var typeID = generateTypeID(_typeName2);\n\n              var typeRecord = this._recordSource.get(typeID);\n\n              if (typeRecord == null) {\n                typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);\n\n                this._recordSource.set(typeID, typeRecord);\n              }\n\n              RelayModernRecord.setValue(typeRecord, abstractKey, implementsInterface);\n\n              if (implementsInterface) {\n                this._traverseSelections(selection, record, data);\n              }\n            } else {\n              // legacy behavior for abstract refinements: always normalize even\n              // if the type doesn't conform, but track if the type matches or not\n              // for determining whether response fields are expected to be present\n              var _implementsInterface = data.hasOwnProperty(abstractKey);\n\n              var parentIsUnmatchedAbstractType = this._isUnmatchedAbstractType;\n              this._isUnmatchedAbstractType = this._isUnmatchedAbstractType || !_implementsInterface;\n\n              this._traverseSelections(selection, record, data);\n\n              this._isUnmatchedAbstractType = parentIsUnmatchedAbstractType;\n            }\n\n            break;\n          }\n\n        case TYPE_DISCRIMINATOR:\n          {\n            if (RelayFeatureFlags.ENABLE_PRECISE_TYPE_REFINEMENT) {\n              var _abstractKey = selection.abstractKey;\n\n              var _implementsInterface2 = data.hasOwnProperty(_abstractKey);\n\n              var _typeName3 = RelayModernRecord.getType(record);\n\n              var _typeID = generateTypeID(_typeName3);\n\n              var _typeRecord = this._recordSource.get(_typeID);\n\n              if (_typeRecord == null) {\n                _typeRecord = RelayModernRecord.create(_typeID, TYPE_SCHEMA_TYPE);\n\n                this._recordSource.set(_typeID, _typeRecord);\n              }\n\n              RelayModernRecord.setValue(_typeRecord, _abstractKey, _implementsInterface2);\n            }\n\n            break;\n          }\n\n        case LINKED_HANDLE:\n        case SCALAR_HANDLE:\n          var args = selection.args ? getArgumentValues(selection.args, this._variables) : {};\n          var fieldKey = getStorageKey(selection, this._variables);\n          var handleKey = getHandleStorageKey(selection, this._variables);\n\n          this._handleFieldPayloads.push({\n            args: args,\n            dataID: RelayModernRecord.getDataID(record),\n            fieldKey: fieldKey,\n            handle: selection.handle,\n            handleKey: handleKey,\n            handleArgs: selection.handleArgs ? getArgumentValues(selection.handleArgs, this._variables) : {}\n          });\n\n          break;\n\n        case MODULE_IMPORT:\n          this._normalizeModuleImport(node, selection, record, data);\n\n          break;\n\n        case DEFER:\n          this._normalizeDefer(selection, record, data);\n\n          break;\n\n        case STREAM:\n          this._normalizeStream(selection, record, data);\n\n          break;\n\n        case CLIENT_EXTENSION:\n          var isClientExtension = this._isClientExtension;\n          this._isClientExtension = true;\n\n          this._traverseSelections(selection, record, data);\n\n          this._isClientExtension = isClientExtension;\n          break;\n\n        case CLIENT_COMPONENT:\n          if (this._shouldProcessClientComponents === false) {\n            break;\n          }\n\n          this._traverseSelections(selection.fragment, record, data);\n\n          break;\n\n        case FLIGHT_FIELD:\n          if (RelayFeatureFlags.ENABLE_REACT_FLIGHT_COMPONENT_FIELD) {\n            this._normalizeFlightField(node, selection, record, data);\n          } else {\n            throw new Error('Flight fields are not yet supported.');\n          }\n\n          break;\n\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    }\n  };\n\n  _proto._normalizeDefer = function _normalizeDefer(defer, record, data) {\n    var isDeferred = defer[\"if\"] === null || this._getVariableValue(defer[\"if\"]);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isDeferred === 'boolean', 'RelayResponseNormalizer: Expected value for @defer `if` argument to ' + 'be a boolean, got `%s`.', isDeferred) : void 0;\n    }\n\n    if (isDeferred === false) {\n      // If defer is disabled there will be no additional response chunk:\n      // normalize the data already present.\n      this._traverseSelections(defer, record, data);\n    } else {\n      // Otherwise data *for this selection* should not be present: enqueue\n      // metadata to process the subsequent response chunk.\n      this._incrementalPlaceholders.push({\n        kind: 'defer',\n        data: data,\n        label: defer.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        selector: createNormalizationSelector(defer, RelayModernRecord.getDataID(record), this._variables),\n        typeName: RelayModernRecord.getType(record)\n      });\n    }\n  };\n\n  _proto._normalizeStream = function _normalizeStream(stream, record, data) {\n    // Always normalize regardless of whether streaming is enabled or not,\n    // this populates the initial array value (including any items when\n    // initial_count > 0).\n    this._traverseSelections(stream, record, data);\n\n    var isStreamed = stream[\"if\"] === null || this._getVariableValue(stream[\"if\"]);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isStreamed === 'boolean', 'RelayResponseNormalizer: Expected value for @stream `if` argument ' + 'to be a boolean, got `%s`.', isStreamed) : void 0;\n    }\n\n    if (isStreamed === true) {\n      // If streaming is enabled, *also* emit metadata to process any\n      // response chunks that may be delivered.\n      this._incrementalPlaceholders.push({\n        kind: 'stream',\n        label: stream.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        parentID: RelayModernRecord.getDataID(record),\n        node: stream,\n        variables: this._variables\n      });\n    }\n  };\n\n  _proto._normalizeModuleImport = function _normalizeModuleImport(parent, moduleImport, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for @module to be an object.') : invariant(false) : void 0;\n    var typeName = RelayModernRecord.getType(record);\n    var componentKey = getModuleComponentKey(moduleImport.documentName);\n    var componentReference = data[componentKey];\n    RelayModernRecord.setValue(record, componentKey, componentReference !== null && componentReference !== void 0 ? componentReference : null);\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = data[operationKey];\n    RelayModernRecord.setValue(record, operationKey, operationReference !== null && operationReference !== void 0 ? operationReference : null);\n\n    if (operationReference != null) {\n      this._moduleImportPayloads.push({\n        data: data,\n        dataID: RelayModernRecord.getDataID(record),\n        operationReference: operationReference,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        typeName: typeName,\n        variables: this._variables\n      });\n    }\n  };\n\n  _proto._normalizeField = function _normalizeField(parent, selection, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'writeField(): Expected data for field `%s` to be an object.', selection.name) : invariant(false) : void 0;\n    var responseKey = selection.alias || selection.name;\n    var storageKey = getStorageKey(selection, this._variables);\n    var fieldValue = data[responseKey];\n\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        // Fields may be missing in the response in two main cases:\n        // - Inside a client extension: the server will not generally return\n        //   values for these fields, but a local update may provide them.\n        // - Inside an abstract type refinement where the concrete type does\n        //   not conform to the interface/union.\n        // However an otherwise-required field may also be missing if the server\n        // is configured to skip fields with `null` values, in which case the\n        // client is assumed to be correctly configured with\n        // treatMissingFieldsAsNull=true.\n        var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;\n\n        if (isOptionalField) {\n          // Field not expected to exist regardless of whether the server is pruning null\n          // fields or not.\n          return;\n        } else if (!this._treatMissingFieldsAsNull) {\n          // Not optional and the server is not pruning null fields: field is expected\n          // to be present\n          if (process.env.NODE_ENV !== \"production\") {\n            process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n          }\n\n          return;\n        }\n      }\n\n      if (process.env.NODE_ENV !== \"production\") {\n        if (selection.kind === SCALAR_FIELD) {\n          this._validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue);\n        }\n      }\n\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n\n    if (selection.kind === SCALAR_FIELD) {\n      if (process.env.NODE_ENV !== \"production\") {\n        this._validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue);\n      }\n\n      RelayModernRecord.setValue(record, storageKey, fieldValue);\n    } else if (selection.kind === LINKED_FIELD) {\n      this._path.push(responseKey);\n\n      if (selection.plural) {\n        this._normalizePluralLink(selection, record, storageKey, fieldValue);\n      } else {\n        this._normalizeLink(selection, record, storageKey, fieldValue);\n      }\n\n      this._path.pop();\n    } else {\n      selection;\n      !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s` during normalization.', selection.kind) : invariant(false) : void 0;\n    }\n  };\n\n  _proto._normalizeFlightField = function _normalizeFlightField(parent, selection, record, data) {\n    var responseKey = selection.alias || selection.name;\n    var storageKey = getStorageKey(selection, this._variables);\n    var fieldValue = data[responseKey];\n\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        // Flight field may be missing in the response if:\n        // - It is inside an abstract type refinement where the concrete type does\n        //   not conform to the interface/union.\n        // However an otherwise-required field may also be missing if the server\n        // is configured to skip fields with `null` values, in which case the\n        // client is assumed to be correctly configured with\n        // treatMissingFieldsAsNull=true.\n        if (this._isUnmatchedAbstractType) {\n          // Field not expected to exist regardless of whether the server is pruning null\n          // fields or not.\n          return;\n        } else if (!this._treatMissingFieldsAsNull) {\n          // Not optional and the server is not pruning null fields: field is expected\n          // to be present\n          if (process.env.NODE_ENV !== \"production\") {\n            process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n          }\n\n          return;\n        }\n      }\n\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n\n    var reactFlightPayload = refineToReactFlightPayloadData(fieldValue);\n    var reactFlightPayloadDeserializer = this._reactFlightPayloadDeserializer;\n    !(reactFlightPayload != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected React Flight payload data to be an ' + 'object with `status`, tree`, `queries` and `errors` properties, got ' + '`%s`.', fieldValue) : invariant(false) : void 0;\n    !(typeof reactFlightPayloadDeserializer === 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected reactFlightPayloadDeserializer to ' + 'be a function, got `%s`.', reactFlightPayloadDeserializer) : invariant(false) : void 0;\n\n    if (reactFlightPayload.errors.length > 0) {\n      if (typeof this._reactFlightServerErrorHandler === 'function') {\n        this._reactFlightServerErrorHandler(reactFlightPayload.status, reactFlightPayload.errors);\n      } else {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Received server errors for field `%s`.\\n\\n' + '%s\\n%s', responseKey, reactFlightPayload.errors[0].message, reactFlightPayload.errors[0].stack) : void 0;\n      }\n    }\n\n    var reactFlightID = generateClientID(RelayModernRecord.getDataID(record), getStorageKey(selection, this._variables));\n\n    var reactFlightClientResponseRecord = this._recordSource.get(reactFlightID);\n\n    if (reactFlightClientResponseRecord == null) {\n      reactFlightClientResponseRecord = RelayModernRecord.create(reactFlightID, REACT_FLIGHT_TYPE_NAME);\n\n      this._recordSource.set(reactFlightID, reactFlightClientResponseRecord);\n    }\n\n    if (reactFlightPayload.tree == null) {\n      // This typically indicates that a fatal server error prevented rows from\n      // being written. When this occurs, we should not continue normalization of\n      // the Flight field because the row response is malformed.\n      //\n      // Receiving empty rows is OK because it can indicate the start of a stream.\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Expected `tree` not to be null. This ' + 'typically indicates that a fatal server error prevented any Server ' + 'Component rows from being written.') : void 0; // We create the flight record with a null value for the tree\n      // and empty reachable definitions\n\n      RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_TREE_STORAGE_KEY, null);\n      RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY, []);\n      RelayModernRecord.setLinkedRecordID(record, storageKey, reactFlightID);\n      return;\n    } // We store the deserialized reactFlightClientResponse in a separate\n    // record and link it to the parent record. This is so we can GC the Flight\n    // tree later even if the parent record is still reachable.\n\n\n    var reactFlightClientResponse = reactFlightPayloadDeserializer(reactFlightPayload.tree);\n    RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_TREE_STORAGE_KEY, reactFlightClientResponse);\n    var reachableExecutableDefinitions = [];\n\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(reactFlightPayload.queries),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var query = _step.value;\n\n        if (query.response.data != null) {\n          this._moduleImportPayloads.push({\n            data: query.response.data,\n            dataID: ROOT_ID,\n            operationReference: query.module,\n            path: [],\n            typeName: ROOT_TYPE,\n            variables: query.variables\n          });\n        }\n\n        reachableExecutableDefinitions.push({\n          module: query.module,\n          variables: query.variables\n        });\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(reactFlightPayload.fragments),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var fragment = _step2.value;\n\n        if (fragment.response.data != null) {\n          this._moduleImportPayloads.push({\n            data: fragment.response.data,\n            dataID: fragment.__id,\n            operationReference: fragment.module,\n            path: [],\n            typeName: fragment.__typename,\n            variables: fragment.variables\n          });\n        }\n\n        reachableExecutableDefinitions.push({\n          module: fragment.module,\n          variables: fragment.variables\n        });\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY, reachableExecutableDefinitions);\n    RelayModernRecord.setLinkedRecordID(record, storageKey, reactFlightID);\n  };\n\n  _proto._normalizeLink = function _normalizeLink(field, record, storageKey, fieldValue) {\n    var _field$concreteType;\n\n    !(typeof fieldValue === 'object' && fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an object.', storageKey) : invariant(false) : void 0;\n    var nextID = this._getDataId( // $FlowFixMe[incompatible-variance]\n    fieldValue, // $FlowFixMe[incompatible-variance]\n    (_field$concreteType = field.concreteType) !== null && _field$concreteType !== void 0 ? _field$concreteType : this._getRecordType(fieldValue)) || // Reuse previously generated client IDs\n    RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);\n    !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : invariant(false) : void 0;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      this._validateConflictingLinkedFieldsWithIdenticalId(record, RelayModernRecord.getLinkedRecordID(record, storageKey), nextID, storageKey);\n    }\n\n    RelayModernRecord.setLinkedRecordID(record, storageKey, nextID);\n\n    var nextRecord = this._recordSource.get(nextID);\n\n    if (!nextRecord) {\n      // $FlowFixMe[incompatible-variance]\n      var _typeName4 = field.concreteType || this._getRecordType(fieldValue);\n\n      nextRecord = RelayModernRecord.create(nextID, _typeName4);\n\n      this._recordSource.set(nextID, nextRecord);\n    } else if (process.env.NODE_ENV !== \"production\") {\n      this._validateRecordType(nextRecord, field, fieldValue);\n    } // $FlowFixMe[incompatible-variance]\n\n\n    this._traverseSelections(field, nextRecord, fieldValue);\n  };\n\n  _proto._normalizePluralLink = function _normalizePluralLink(field, record, storageKey, fieldValue) {\n    var _this = this;\n\n    !Array.isArray(fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an array ' + 'of objects.', storageKey) : invariant(false) : void 0;\n    var prevIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n    var nextIDs = [];\n    fieldValue.forEach(function (item, nextIndex) {\n      var _field$concreteType2;\n\n      // validate response data\n      if (item == null) {\n        nextIDs.push(item);\n        return;\n      }\n\n      _this._path.push(String(nextIndex));\n\n      !(typeof item === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected elements for field `%s` to be ' + 'objects.', storageKey) : invariant(false) : void 0;\n      var nextID = _this._getDataId( // $FlowFixMe[incompatible-variance]\n      item, // $FlowFixMe[incompatible-variance]\n      (_field$concreteType2 = field.concreteType) !== null && _field$concreteType2 !== void 0 ? _field$concreteType2 : _this._getRecordType(item)) || prevIDs && prevIDs[nextIndex] || // Reuse previously generated client IDs:\n      generateClientID(RelayModernRecord.getDataID(record), storageKey, nextIndex);\n      !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id of elements of field `%s` to ' + 'be strings.', storageKey) : invariant(false) : void 0;\n      nextIDs.push(nextID);\n\n      var nextRecord = _this._recordSource.get(nextID);\n\n      if (!nextRecord) {\n        // $FlowFixMe[incompatible-variance]\n        var _typeName5 = field.concreteType || _this._getRecordType(item);\n\n        nextRecord = RelayModernRecord.create(nextID, _typeName5);\n\n        _this._recordSource.set(nextID, nextRecord);\n      } else if (process.env.NODE_ENV !== \"production\") {\n        _this._validateRecordType(nextRecord, field, item);\n      } // NOTE: the check to strip __DEV__ code only works for simple\n      // `if (__DEV__)`\n\n\n      if (process.env.NODE_ENV !== \"production\") {\n        if (prevIDs) {\n          _this._validateConflictingLinkedFieldsWithIdenticalId(record, prevIDs[nextIndex], nextID, storageKey);\n        }\n      } // $FlowFixMe[incompatible-variance]\n\n\n      _this._traverseSelections(field, nextRecord, item);\n\n      _this._path.pop();\n    });\n    RelayModernRecord.setLinkedRecordIDs(record, storageKey, nextIDs);\n  }\n  /**\n   * Warns if the type of the record does not match the type of the field/payload.\n   */\n  ;\n\n  _proto._validateRecordType = function _validateRecordType(record, field, payload) {\n    var _field$concreteType3;\n\n    var typeName = (_field$concreteType3 = field.concreteType) !== null && _field$concreteType3 !== void 0 ? _field$concreteType3 : this._getRecordType(payload);\n    var dataID = RelayModernRecord.getDataID(record);\n    process.env.NODE_ENV !== \"production\" ? warning(isClientID(dataID) && dataID !== ROOT_ID || RelayModernRecord.getType(record) === typeName, 'RelayResponseNormalizer: Invalid record `%s`. Expected %s to be ' + 'consistent, but the record was assigned conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', dataID, TYPENAME_KEY, RelayModernRecord.getType(record), typeName) : void 0;\n  }\n  /**\n   * Warns if a single response contains conflicting fields with the same id\n   */\n  ;\n\n  _proto._validateConflictingFieldsWithIdenticalId = function _validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue) {\n    // NOTE: Only call this function in DEV\n    if (process.env.NODE_ENV !== \"production\") {\n      var dataID = RelayModernRecord.getDataID(record);\n      var previousValue = RelayModernRecord.getValue(record, storageKey);\n      process.env.NODE_ENV !== \"production\" ? warning(storageKey === TYPENAME_KEY || previousValue === undefined || areEqual(previousValue, fieldValue), 'RelayResponseNormalizer: Invalid record. The record contains two ' + 'instances of the same id: `%s` with conflicting field, %s and its values: %s and %s. ' + 'If two fields are different but share ' + 'the same id, one field will overwrite the other.', dataID, storageKey, previousValue, fieldValue) : void 0;\n    }\n  }\n  /**\n   * Warns if a single response contains conflicting fields with the same id\n   */\n  ;\n\n  _proto._validateConflictingLinkedFieldsWithIdenticalId = function _validateConflictingLinkedFieldsWithIdenticalId(record, prevID, nextID, storageKey) {\n    // NOTE: Only call this function in DEV\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(prevID === undefined || prevID === nextID, 'RelayResponseNormalizer: Invalid record. The record contains ' + 'references to the conflicting field, %s and its id values: %s and %s. ' + 'We need to make sure that the record the field points ' + 'to remains consistent or one field will overwrite the other.', storageKey, prevID, nextID) : void 0;\n    }\n  };\n\n  return RelayResponseNormalizer;\n}();\n\nmodule.exports = {\n  normalize: normalize\n};"]},"metadata":{},"sourceType":"script"}