{"ast":null,"code":"import { Environment, Network, RecordSource, Store, Observable } from 'relay-runtime';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\nconst {\n  REACT_APP_WS_URL,\n  REACT_APP_API_URL\n} = process.env;\n\nconst getSubscriptionClient = () => {\n  let reactAppWsUrl = REACT_APP_WS_URL;\n\n  if (!reactAppWsUrl) {\n    reactAppWsUrl = 'ws://localhost:5000';\n  }\n\n  return new SubscriptionClient(`${reactAppWsUrl}/graphql`, {\n    reconnect: true\n  });\n};\n\nconst getSubscriber = () => {\n  const subscriptionClient = getSubscriptionClient();\n  return (request, variables) => {\n    const subscribeObservable = subscriptionClient.request({\n      query: request.text,\n      operationName: request.name,\n      variables\n    }); // Important: Convert subscriptions-transport-ws observable type to Relay's\n    // @ts-ignore\n\n    return Observable.from(subscribeObservable);\n  };\n};\n\nexport const fetchQuery = async (request, variables) => {\n  let reactAppApiUrl = REACT_APP_API_URL;\n\n  if (!reactAppApiUrl) {\n    reactAppApiUrl = 'http://localhost:8080';\n  }\n\n  const res = await fetch(`${reactAppApiUrl}/graphql`, {\n    method: 'POST',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    },\n    body: JSON.stringify({\n      query: request.text,\n      variables\n    })\n  });\n  return res.json();\n};\nexport const getEnvironment = () => {\n  const subscribe = getSubscriber();\n  return new Environment({\n    network: Network.create(fetchQuery, subscribe),\n    store: new Store(new RecordSource())\n  });\n};","map":{"version":3,"sources":["/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/contexts/relay/environment.tsx"],"names":["Environment","Network","RecordSource","Store","Observable","SubscriptionClient","REACT_APP_WS_URL","REACT_APP_API_URL","process","env","getSubscriptionClient","reactAppWsUrl","reconnect","getSubscriber","subscriptionClient","request","variables","subscribeObservable","query","text","operationName","name","from","fetchQuery","reactAppApiUrl","res","fetch","method","mode","headers","body","JSON","stringify","json","getEnvironment","subscribe","network","create","store"],"mappings":"AAAA,SACEA,WADF,EAGEC,OAHF,EAIEC,YAJF,EAMEC,KANF,EAQEC,UARF,QAUO,eAVP;AAWA,SAASC,kBAAT,QAAmC,4BAAnC;AAEA,MAAM;AACJC,EAAAA,gBADI;AAEJC,EAAAA;AAFI,IAGFC,OAAO,CAACC,GAHZ;;AAKA,MAAMC,qBAAqB,GAAG,MAA0B;AACtD,MAAIC,aAAa,GAAGL,gBAApB;;AACA,MAAI,CAACK,aAAL,EAAoB;AAClBA,IAAAA,aAAa,GAAG,qBAAhB;AACD;;AAED,SAAO,IAAIN,kBAAJ,CAAwB,GAAEM,aAAc,UAAxC,EAAmD;AACxDC,IAAAA,SAAS,EAAE;AAD6C,GAAnD,CAAP;AAGD,CATD;;AAWA,MAAMC,aAAa,GAAG,MAAsG;AAC1H,QAAMC,kBAAkB,GAAGJ,qBAAqB,EAAhD;AAEA,SAAO,CAACK,OAAD,EAA6BC,SAA7B,KAAgG;AACrG,UAAMC,mBAAmB,GAAGH,kBAAkB,CAACC,OAAnB,CAA2B;AACrDG,MAAAA,KAAK,EAAEH,OAAO,CAACI,IADsC;AAErDC,MAAAA,aAAa,EAAEL,OAAO,CAACM,IAF8B;AAGrDL,MAAAA;AAHqD,KAA3B,CAA5B,CADqG,CAOrG;AACA;;AACA,WAAOZ,UAAU,CAACkB,IAAX,CAAgBL,mBAAhB,CAAP;AACD,GAVD;AAWD,CAdD;;AAgBA,OAAO,MAAMM,UAAU,GAAG,OAAOR,OAAP,EAAmCC,SAAnC,KAAsF;AAC9G,MAAIQ,cAAc,GAAGjB,iBAArB;;AACA,MAAI,CAACiB,cAAL,EAAqB;AACnBA,IAAAA,cAAc,GAAG,uBAAjB;AACD;;AAED,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEF,cAAe,UAAnB,EAA8B;AACnDG,IAAAA,MAAM,EAAE,MAD2C;AAEnDC,IAAAA,IAAI,EAAE,MAF6C;AAGnDC,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,qCAA8B;AAFvB,KAH0C;AAOnDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBd,MAAAA,KAAK,EAAEH,OAAO,CAACI,IADI;AAEnBH,MAAAA;AAFmB,KAAf;AAP6C,GAA9B,CAAvB;AAaA,SAAOS,GAAG,CAACQ,IAAJ,EAAP;AACD,CApBM;AAsBP,OAAO,MAAMC,cAAc,GAAG,MAAmB;AAC/C,QAAMC,SAAS,GAAGtB,aAAa,EAA/B;AAEA,SAAO,IAAIb,WAAJ,CAAgB;AACrBoC,IAAAA,OAAO,EAAEnC,OAAO,CAACoC,MAAR,CAAed,UAAf,EAA2BY,SAA3B,CADY;AAErBG,IAAAA,KAAK,EAAE,IAAInC,KAAJ,CAAU,IAAID,YAAJ,EAAV;AAFc,GAAhB,CAAP;AAID,CAPM","sourcesContent":["import {\n  Environment,\n  GraphQLResponse,\n  Network,\n  RecordSource,\n  RequestParameters,\n  Store,\n  Variables,\n  Observable,\n  Disposable,\n} from 'relay-runtime'\nimport { SubscriptionClient } from 'subscriptions-transport-ws'\n\nconst {\n  REACT_APP_WS_URL,\n  REACT_APP_API_URL\n} = process.env\n\nconst getSubscriptionClient = (): SubscriptionClient => {\n  let reactAppWsUrl = REACT_APP_WS_URL\n  if (!reactAppWsUrl) {\n    reactAppWsUrl = 'ws://localhost:5000'\n  }\n\n  return new SubscriptionClient(`${reactAppWsUrl}/graphql`, {\n    reconnect: true,\n  });\n}\n\nconst getSubscriber = (): (request: RequestParameters, variables: Variables) => Observable<GraphQLResponse> | Disposable => {\n  const subscriptionClient = getSubscriptionClient()\n\n  return (request: RequestParameters, variables: Variables): Observable<GraphQLResponse> | Disposable => {\n    const subscribeObservable = subscriptionClient.request({\n      query: request.text as string,\n      operationName: request.name,\n      variables,\n    });\n\n    // Important: Convert subscriptions-transport-ws observable type to Relay's\n    // @ts-ignore\n    return Observable.from(subscribeObservable);\n  };\n}\n\nexport const fetchQuery = async (request: RequestParameters, variables: Variables): Promise<GraphQLResponse> => {\n  let reactAppApiUrl = REACT_APP_API_URL\n  if (!reactAppApiUrl) {\n    reactAppApiUrl = 'http://localhost:8080'\n  }\n\n  const res = await fetch(`${reactAppApiUrl}/graphql`, {\n    method: 'POST',\n    mode: 'cors',\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin':'*',\n    },\n    body: JSON.stringify({\n      query: request.text,\n      variables\n    })\n  })\n\n  return res.json()\n}\n\nexport const getEnvironment = (): Environment => {\n  const subscribe = getSubscriber()\n\n  return new Environment({\n    network: Network.create(fetchQuery, subscribe),\n    store: new Store(new RecordSource())\n  })\n}\n"]},"metadata":{},"sourceType":"module"}