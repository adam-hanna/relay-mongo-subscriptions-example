{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = require('react');\n\nvar ReactRelayContext = require('./ReactRelayContext');\n\nvar ReactRelayQueryFetcher = require('./ReactRelayQueryFetcher');\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar buildReactRelayContainer = require('./buildReactRelayContainer');\n\nvar getRootVariablesForFragments = require('./getRootVariablesForFragments');\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar _require = require('./ReactRelayContainerUtils'),\n    getContainerName = _require.getContainerName;\n\nvar _require2 = require('./RelayContext'),\n    assertRelayContext = _require2.assertRelayContext;\n\nvar _require3 = require('relay-runtime'),\n    Observable = _require3.Observable,\n    createFragmentSpecResolver = _require3.createFragmentSpecResolver,\n    createOperationDescriptor = _require3.createOperationDescriptor,\n    getDataIDsFromObject = _require3.getDataIDsFromObject,\n    getRequest = _require3.getRequest,\n    getSelector = _require3.getSelector,\n    getVariablesFromObject = _require3.getVariablesFromObject,\n    isScalarAndEqual = _require3.isScalarAndEqual;\n/**\n * Composes a React component class, returning a new class that intercepts\n * props, resolving them with the provided fragments and subscribing for\n * updates.\n */\n\n\nfunction createContainerWithFragments(Component, fragments, taggedNode) {\n  var _class, _temp;\n\n  var containerName = getContainerName(Component);\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    (0, _inheritsLoose2[\"default\"])(_class, _React$Component);\n\n    function _class(props) {\n      var _props$__rootIsQueryR, _this;\n\n      _this = _React$Component.call(this, props) || this;\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_handleFragmentDataUpdate\", function () {\n        var resolverFromThisUpdate = _this.state.resolver;\n\n        _this.setState(function (updatedState) {\n          return (// If this event belongs to the current data source, update.\n            // Otherwise we should ignore it.\n            resolverFromThisUpdate === updatedState.resolver ? {\n              data: updatedState.resolver.resolve()\n            } : null\n          );\n        });\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_refetch\", function (refetchVariables, renderVariables, observerOrCallback, options) {\n        if (_this._isUnmounted) {\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'ReactRelayRefetchContainer: Unexpected call of `refetch` ' + 'on unmounted container `%s`. It looks like some instances ' + 'of your container still trying to refetch the data but they already ' + 'unmounted. Please make sure you clear all timers, intervals, async ' + 'calls, etc that may trigger `refetch`.', containerName) : void 0;\n          return {\n            dispose: function dispose() {}\n          };\n        }\n\n        var _assertRelayContext = assertRelayContext(_this.props.__relayContext),\n            environment = _assertRelayContext.environment;\n\n        var rootVariables = getRootVariablesForFragments(fragments, _this.props);\n        var fetchVariables = typeof refetchVariables === 'function' ? refetchVariables(_this._getFragmentVariables()) : refetchVariables; // $FlowFixMe[cannot-spread-interface]\n\n        fetchVariables = (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, rootVariables), fetchVariables);\n        var fragmentVariables = renderVariables ? // $FlowFixMe[cannot-spread-interface]\n        (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, fetchVariables), renderVariables) : fetchVariables;\n        var cacheConfig = options ? {\n          force: !!options.force\n        } : undefined;\n\n        if (cacheConfig != null && (options === null || options === void 0 ? void 0 : options.metadata) != null) {\n          cacheConfig.metadata = options === null || options === void 0 ? void 0 : options.metadata;\n        }\n\n        var observer = typeof observerOrCallback === 'function' ? {\n          // callback is not exectued on complete or unsubscribe\n          // for backward compatibility\n          next: observerOrCallback,\n          error: observerOrCallback\n        } : observerOrCallback || {};\n        var query = getRequest(taggedNode);\n        var operation = createOperationDescriptor(query, fetchVariables, cacheConfig); // TODO: T26288752 find a better way\n\n        /* eslint-disable lint/react-state-props-mutation */\n\n        _this.state.localVariables = fetchVariables;\n        /* eslint-enable lint/react-state-props-mutation */\n        // Cancel any previously running refetch.\n\n        _this._refetchSubscription && _this._refetchSubscription.unsubscribe(); // Declare refetchSubscription before assigning it in .start(), since\n        // synchronous completion may call callbacks .subscribe() returns.\n\n        var refetchSubscription;\n\n        var storeSnapshot = _this._getQueryFetcher().lookupInStore(environment, operation, options === null || options === void 0 ? void 0 : options.fetchPolicy);\n\n        if (storeSnapshot != null) {\n          _this.state.resolver.setVariables(fragmentVariables, operation.request.node);\n\n          _this.setState(function (latestState) {\n            return {\n              data: latestState.resolver.resolve(),\n              contextForChildren: {\n                environment: _this.props.__relayContext.environment\n              }\n            };\n          }, function () {\n            observer.next && observer.next();\n            observer.complete && observer.complete();\n          });\n\n          return {\n            dispose: function dispose() {}\n          };\n        }\n\n        _this._getQueryFetcher().execute({\n          environment: environment,\n          operation: operation,\n          // TODO (T26430099): Cleanup old references\n          preservePreviousReferences: true\n        }).mergeMap(function (response) {\n          _this.state.resolver.setVariables(fragmentVariables, operation.request.node);\n\n          return Observable.create(function (sink) {\n            return _this.setState(function (latestState) {\n              return {\n                data: latestState.resolver.resolve(),\n                contextForChildren: {\n                  environment: _this.props.__relayContext.environment\n                }\n              };\n            }, function () {\n              sink.next();\n              sink.complete();\n            });\n          });\n        })[\"finally\"](function () {\n          // Finalizing a refetch should only clear this._refetchSubscription\n          // if the finizing subscription is the most recent call.\n          if (_this._refetchSubscription === refetchSubscription) {\n            _this._refetchSubscription = null;\n          }\n        }).subscribe((0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, observer), {}, {\n          start: function start(subscription) {\n            _this._refetchSubscription = refetchSubscription = subscription;\n            observer.start && observer.start(subscription);\n          }\n        }));\n\n        return {\n          dispose: function dispose() {\n            refetchSubscription && refetchSubscription.unsubscribe();\n          }\n        };\n      });\n      var relayContext = assertRelayContext(props.__relayContext);\n      var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== void 0 ? _props$__rootIsQueryR : false;\n      _this._refetchSubscription = null; // Do not provide a subscription/callback here.\n      // It is possible for this render to be interrupted or aborted,\n      // In which case the subscription would cause a leak.\n      // We will add the subscription in componentDidMount().\n\n      var resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);\n      _this.state = {\n        data: resolver.resolve(),\n        localVariables: null,\n        prevProps: props,\n        prevPropsContext: relayContext,\n        contextForChildren: relayContext,\n        relayProp: getRelayProp(relayContext.environment, _this._refetch),\n        resolver: resolver\n      };\n      _this._isUnmounted = false;\n      return _this;\n    }\n\n    var _proto = _class.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      this._isUnmounted = false;\n\n      this._subscribeToNewResolver();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n      // If the environment has changed or props point to new records then\n      // previously fetched data and any pending fetches no longer apply:\n      // - Existing references are on the old environment.\n      // - Existing references are based on old variables.\n      // - Pending fetches are for the previous records.\n      if (this.state.resolver !== prevState.resolver) {\n        prevState.resolver.dispose();\n        this._queryFetcher && this._queryFetcher.dispose();\n        this._refetchSubscription && this._refetchSubscription.unsubscribe();\n\n        this._subscribeToNewResolver();\n      }\n    }\n    /**\n     * When new props are received, read data for the new props and add it to\n     * state. Props may be the same in which case previous data can be reused.\n     */\n    ;\n\n    _class.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$__rootIsQu; // Any props change could impact the query, so we mirror props in state.\n      // This is an unusual pattern, but necessary for this container usecase.\n\n\n      var prevProps = prevState.prevProps;\n      var relayContext = assertRelayContext(nextProps.__relayContext);\n      var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== void 0 ? _nextProps$__rootIsQu : false;\n      var prevIDs = getDataIDsFromObject(fragments, prevProps);\n      var nextIDs = getDataIDsFromObject(fragments, nextProps);\n      var prevRootVariables = getRootVariablesForFragments(fragments, prevProps);\n      var nextRootVariables = getRootVariablesForFragments(fragments, nextProps);\n      var resolver = prevState.resolver; // If the environment has changed or props point to new records then\n      // previously fetched data and any pending fetches no longer apply:\n      // - Existing references are on the old environment.\n      // - Existing references are based on old variables.\n      // - Pending fetches are for the previous records.\n\n      if (prevState.prevPropsContext.environment !== relayContext.environment || !areEqual(prevRootVariables, nextRootVariables) || !areEqual(prevIDs, nextIDs)) {\n        // Do not provide a subscription/callback here.\n        // It is possible for this render to be interrupted or aborted,\n        // In which case the subscription would cause a leak.\n        // We will add the subscription in componentDidUpdate().\n        resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);\n        return {\n          data: resolver.resolve(),\n          localVariables: null,\n          prevProps: nextProps,\n          prevPropsContext: relayContext,\n          contextForChildren: relayContext,\n          relayProp: getRelayProp(relayContext.environment, prevState.relayProp.refetch),\n          resolver: resolver\n        };\n      } else if (!prevState.localVariables) {\n        resolver.setProps(nextProps);\n      }\n\n      var data = resolver.resolve();\n\n      if (data !== prevState.data) {\n        return {\n          data: data,\n          prevProps: nextProps\n        };\n      }\n\n      return null;\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this._isUnmounted = true;\n      this.state.resolver.dispose();\n      this._queryFetcher && this._queryFetcher.dispose();\n      this._refetchSubscription && this._refetchSubscription.unsubscribe();\n    };\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n      // Short-circuit if any Relay-related data has changed\n      if (nextState.data !== this.state.data || nextState.relayProp !== this.state.relayProp) {\n        return true;\n      } // Otherwise, for convenience short-circuit if all non-Relay props\n      // are scalar and equal\n\n\n      var keys = Object.keys(nextProps);\n\n      for (var ii = 0; ii < keys.length; ii++) {\n        var _key = keys[ii];\n\n        if (_key === '__relayContext') {\n          if (this.state.prevPropsContext.environment !== nextState.prevPropsContext.environment) {\n            return true;\n          }\n        } else {\n          if (!fragments.hasOwnProperty(_key) && !isScalarAndEqual(nextProps[_key], this.props[_key])) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    _proto._subscribeToNewResolver = function _subscribeToNewResolver() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          resolver = _this$state.resolver; // Event listeners are only safe to add during the commit phase,\n      // So they won't leak if render is interrupted or errors.\n\n      resolver.setCallback(this._handleFragmentDataUpdate); // External values could change between render and commit.\n      // Check for this case, even though it requires an extra store read.\n\n      var maybeNewData = resolver.resolve();\n\n      if (data !== maybeNewData) {\n        this.setState({\n          data: maybeNewData\n        });\n      }\n    }\n    /**\n     * Render new data for the existing props/context.\n     */\n    ;\n\n    _proto._getFragmentVariables = function _getFragmentVariables() {\n      return getVariablesFromObject(fragments, this.props);\n    };\n\n    _proto._getQueryFetcher = function _getQueryFetcher() {\n      if (!this._queryFetcher) {\n        this._queryFetcher = new ReactRelayQueryFetcher();\n      }\n\n      return this._queryFetcher;\n    };\n\n    _proto.render = function render() {\n      var _this$props = this.props,\n          componentRef = _this$props.componentRef,\n          __relayContext = _this$props.__relayContext,\n          __rootIsQueryRenderer = _this$props.__rootIsQueryRenderer,\n          props = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props, [\"componentRef\", \"__relayContext\", \"__rootIsQueryRenderer\"]);\n      var _this$state2 = this.state,\n          relayProp = _this$state2.relayProp,\n          contextForChildren = _this$state2.contextForChildren;\n      return /*#__PURE__*/React.createElement(ReactRelayContext.Provider, {\n        value: contextForChildren\n      }, /*#__PURE__*/React.createElement(Component, (0, _extends2[\"default\"])({}, props, this.state.data, {\n        ref: componentRef,\n        relay: relayProp\n      })));\n    };\n\n    return _class;\n  }(React.Component), (0, _defineProperty2[\"default\"])(_class, \"displayName\", containerName), _temp;\n}\n\nfunction getRelayProp(environment, refetch) {\n  return {\n    environment: environment,\n    refetch: refetch\n  };\n}\n/**\n * Wrap the basic `createContainer()` function with logic to adapt to the\n * `context.relay.environment` in which it is rendered. Specifically, the\n * extraction of the environment-specific version of fragments in the\n * `fragmentSpec` is memoized once per environment, rather than once per\n * instance of the container constructed/rendered.\n */\n\n\nfunction createContainer(Component, fragmentSpec, taggedNode) {\n  // $FlowFixMe[incompatible-return]\n  return buildReactRelayContainer(Component, fragmentSpec, function (ComponentClass, fragments) {\n    return createContainerWithFragments(ComponentClass, fragments, taggedNode);\n  });\n}\n\nmodule.exports = {\n  createContainer: createContainer\n};","map":{"version":3,"sources":["/home/adamhanna/apps/relay-mongo-subscriptions-example/client/node_modules/react-relay/lib/ReactRelayRefetchContainer.js"],"names":["_interopRequireDefault","require","_extends2","_objectWithoutPropertiesLoose2","_objectSpread2","_assertThisInitialized2","_inheritsLoose2","_defineProperty2","React","ReactRelayContext","ReactRelayQueryFetcher","areEqual","buildReactRelayContainer","getRootVariablesForFragments","warning","_require","getContainerName","_require2","assertRelayContext","_require3","Observable","createFragmentSpecResolver","createOperationDescriptor","getDataIDsFromObject","getRequest","getSelector","getVariablesFromObject","isScalarAndEqual","createContainerWithFragments","Component","fragments","taggedNode","_class","_temp","containerName","_React$Component","props","_props$__rootIsQueryR","_this","call","resolverFromThisUpdate","state","resolver","setState","updatedState","data","resolve","refetchVariables","renderVariables","observerOrCallback","options","_isUnmounted","process","env","NODE_ENV","dispose","_assertRelayContext","__relayContext","environment","rootVariables","fetchVariables","_getFragmentVariables","fragmentVariables","cacheConfig","force","undefined","metadata","observer","next","error","query","operation","localVariables","_refetchSubscription","unsubscribe","refetchSubscription","storeSnapshot","_getQueryFetcher","lookupInStore","fetchPolicy","setVariables","request","node","latestState","contextForChildren","complete","execute","preservePreviousReferences","mergeMap","response","create","sink","subscribe","start","subscription","relayContext","rootIsQueryRenderer","__rootIsQueryRenderer","prevProps","prevPropsContext","relayProp","getRelayProp","_refetch","_proto","prototype","componentDidMount","_subscribeToNewResolver","componentDidUpdate","prevState","_queryFetcher","getDerivedStateFromProps","nextProps","_nextProps$__rootIsQu","prevIDs","nextIDs","prevRootVariables","nextRootVariables","refetch","setProps","componentWillUnmount","shouldComponentUpdate","nextState","keys","Object","ii","length","_key","hasOwnProperty","_this$state","setCallback","_handleFragmentDataUpdate","maybeNewData","render","_this$props","componentRef","_this$state2","createElement","Provider","value","ref","relay","createContainer","fragmentSpec","ComponentClass","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = require('react');\n\nvar ReactRelayContext = require('./ReactRelayContext');\n\nvar ReactRelayQueryFetcher = require('./ReactRelayQueryFetcher');\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar buildReactRelayContainer = require('./buildReactRelayContainer');\n\nvar getRootVariablesForFragments = require('./getRootVariablesForFragments');\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar _require = require('./ReactRelayContainerUtils'),\n    getContainerName = _require.getContainerName;\n\nvar _require2 = require('./RelayContext'),\n    assertRelayContext = _require2.assertRelayContext;\n\nvar _require3 = require('relay-runtime'),\n    Observable = _require3.Observable,\n    createFragmentSpecResolver = _require3.createFragmentSpecResolver,\n    createOperationDescriptor = _require3.createOperationDescriptor,\n    getDataIDsFromObject = _require3.getDataIDsFromObject,\n    getRequest = _require3.getRequest,\n    getSelector = _require3.getSelector,\n    getVariablesFromObject = _require3.getVariablesFromObject,\n    isScalarAndEqual = _require3.isScalarAndEqual;\n\n/**\n * Composes a React component class, returning a new class that intercepts\n * props, resolving them with the provided fragments and subscribing for\n * updates.\n */\nfunction createContainerWithFragments(Component, fragments, taggedNode) {\n  var _class, _temp;\n\n  var containerName = getContainerName(Component);\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    (0, _inheritsLoose2[\"default\"])(_class, _React$Component);\n\n    function _class(props) {\n      var _props$__rootIsQueryR, _this;\n\n      _this = _React$Component.call(this, props) || this;\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_handleFragmentDataUpdate\", function () {\n        var resolverFromThisUpdate = _this.state.resolver;\n\n        _this.setState(function (updatedState) {\n          return (// If this event belongs to the current data source, update.\n            // Otherwise we should ignore it.\n            resolverFromThisUpdate === updatedState.resolver ? {\n              data: updatedState.resolver.resolve()\n            } : null\n          );\n        });\n      });\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_refetch\", function (refetchVariables, renderVariables, observerOrCallback, options) {\n        if (_this._isUnmounted) {\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'ReactRelayRefetchContainer: Unexpected call of `refetch` ' + 'on unmounted container `%s`. It looks like some instances ' + 'of your container still trying to refetch the data but they already ' + 'unmounted. Please make sure you clear all timers, intervals, async ' + 'calls, etc that may trigger `refetch`.', containerName) : void 0;\n          return {\n            dispose: function dispose() {}\n          };\n        }\n\n        var _assertRelayContext = assertRelayContext(_this.props.__relayContext),\n            environment = _assertRelayContext.environment;\n\n        var rootVariables = getRootVariablesForFragments(fragments, _this.props);\n        var fetchVariables = typeof refetchVariables === 'function' ? refetchVariables(_this._getFragmentVariables()) : refetchVariables; // $FlowFixMe[cannot-spread-interface]\n\n        fetchVariables = (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, rootVariables), fetchVariables);\n        var fragmentVariables = renderVariables ? // $FlowFixMe[cannot-spread-interface]\n        (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, fetchVariables), renderVariables) : fetchVariables;\n        var cacheConfig = options ? {\n          force: !!options.force\n        } : undefined;\n\n        if (cacheConfig != null && (options === null || options === void 0 ? void 0 : options.metadata) != null) {\n          cacheConfig.metadata = options === null || options === void 0 ? void 0 : options.metadata;\n        }\n\n        var observer = typeof observerOrCallback === 'function' ? {\n          // callback is not exectued on complete or unsubscribe\n          // for backward compatibility\n          next: observerOrCallback,\n          error: observerOrCallback\n        } : observerOrCallback || {};\n        var query = getRequest(taggedNode);\n        var operation = createOperationDescriptor(query, fetchVariables, cacheConfig); // TODO: T26288752 find a better way\n\n        /* eslint-disable lint/react-state-props-mutation */\n\n        _this.state.localVariables = fetchVariables;\n        /* eslint-enable lint/react-state-props-mutation */\n        // Cancel any previously running refetch.\n\n        _this._refetchSubscription && _this._refetchSubscription.unsubscribe(); // Declare refetchSubscription before assigning it in .start(), since\n        // synchronous completion may call callbacks .subscribe() returns.\n\n        var refetchSubscription;\n\n        var storeSnapshot = _this._getQueryFetcher().lookupInStore(environment, operation, options === null || options === void 0 ? void 0 : options.fetchPolicy);\n\n        if (storeSnapshot != null) {\n          _this.state.resolver.setVariables(fragmentVariables, operation.request.node);\n\n          _this.setState(function (latestState) {\n            return {\n              data: latestState.resolver.resolve(),\n              contextForChildren: {\n                environment: _this.props.__relayContext.environment\n              }\n            };\n          }, function () {\n            observer.next && observer.next();\n            observer.complete && observer.complete();\n          });\n\n          return {\n            dispose: function dispose() {}\n          };\n        }\n\n        _this._getQueryFetcher().execute({\n          environment: environment,\n          operation: operation,\n          // TODO (T26430099): Cleanup old references\n          preservePreviousReferences: true\n        }).mergeMap(function (response) {\n          _this.state.resolver.setVariables(fragmentVariables, operation.request.node);\n\n          return Observable.create(function (sink) {\n            return _this.setState(function (latestState) {\n              return {\n                data: latestState.resolver.resolve(),\n                contextForChildren: {\n                  environment: _this.props.__relayContext.environment\n                }\n              };\n            }, function () {\n              sink.next();\n              sink.complete();\n            });\n          });\n        })[\"finally\"](function () {\n          // Finalizing a refetch should only clear this._refetchSubscription\n          // if the finizing subscription is the most recent call.\n          if (_this._refetchSubscription === refetchSubscription) {\n            _this._refetchSubscription = null;\n          }\n        }).subscribe((0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, observer), {}, {\n          start: function start(subscription) {\n            _this._refetchSubscription = refetchSubscription = subscription;\n            observer.start && observer.start(subscription);\n          }\n        }));\n\n        return {\n          dispose: function dispose() {\n            refetchSubscription && refetchSubscription.unsubscribe();\n          }\n        };\n      });\n      var relayContext = assertRelayContext(props.__relayContext);\n      var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== void 0 ? _props$__rootIsQueryR : false;\n      _this._refetchSubscription = null; // Do not provide a subscription/callback here.\n      // It is possible for this render to be interrupted or aborted,\n      // In which case the subscription would cause a leak.\n      // We will add the subscription in componentDidMount().\n\n      var resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);\n      _this.state = {\n        data: resolver.resolve(),\n        localVariables: null,\n        prevProps: props,\n        prevPropsContext: relayContext,\n        contextForChildren: relayContext,\n        relayProp: getRelayProp(relayContext.environment, _this._refetch),\n        resolver: resolver\n      };\n      _this._isUnmounted = false;\n      return _this;\n    }\n\n    var _proto = _class.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      this._isUnmounted = false;\n\n      this._subscribeToNewResolver();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n      // If the environment has changed or props point to new records then\n      // previously fetched data and any pending fetches no longer apply:\n      // - Existing references are on the old environment.\n      // - Existing references are based on old variables.\n      // - Pending fetches are for the previous records.\n      if (this.state.resolver !== prevState.resolver) {\n        prevState.resolver.dispose();\n        this._queryFetcher && this._queryFetcher.dispose();\n        this._refetchSubscription && this._refetchSubscription.unsubscribe();\n\n        this._subscribeToNewResolver();\n      }\n    }\n    /**\n     * When new props are received, read data for the new props and add it to\n     * state. Props may be the same in which case previous data can be reused.\n     */\n    ;\n\n    _class.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$__rootIsQu;\n\n      // Any props change could impact the query, so we mirror props in state.\n      // This is an unusual pattern, but necessary for this container usecase.\n      var prevProps = prevState.prevProps;\n      var relayContext = assertRelayContext(nextProps.__relayContext);\n      var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== void 0 ? _nextProps$__rootIsQu : false;\n      var prevIDs = getDataIDsFromObject(fragments, prevProps);\n      var nextIDs = getDataIDsFromObject(fragments, nextProps);\n      var prevRootVariables = getRootVariablesForFragments(fragments, prevProps);\n      var nextRootVariables = getRootVariablesForFragments(fragments, nextProps);\n      var resolver = prevState.resolver; // If the environment has changed or props point to new records then\n      // previously fetched data and any pending fetches no longer apply:\n      // - Existing references are on the old environment.\n      // - Existing references are based on old variables.\n      // - Pending fetches are for the previous records.\n\n      if (prevState.prevPropsContext.environment !== relayContext.environment || !areEqual(prevRootVariables, nextRootVariables) || !areEqual(prevIDs, nextIDs)) {\n        // Do not provide a subscription/callback here.\n        // It is possible for this render to be interrupted or aborted,\n        // In which case the subscription would cause a leak.\n        // We will add the subscription in componentDidUpdate().\n        resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);\n        return {\n          data: resolver.resolve(),\n          localVariables: null,\n          prevProps: nextProps,\n          prevPropsContext: relayContext,\n          contextForChildren: relayContext,\n          relayProp: getRelayProp(relayContext.environment, prevState.relayProp.refetch),\n          resolver: resolver\n        };\n      } else if (!prevState.localVariables) {\n        resolver.setProps(nextProps);\n      }\n\n      var data = resolver.resolve();\n\n      if (data !== prevState.data) {\n        return {\n          data: data,\n          prevProps: nextProps\n        };\n      }\n\n      return null;\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this._isUnmounted = true;\n      this.state.resolver.dispose();\n      this._queryFetcher && this._queryFetcher.dispose();\n      this._refetchSubscription && this._refetchSubscription.unsubscribe();\n    };\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n      // Short-circuit if any Relay-related data has changed\n      if (nextState.data !== this.state.data || nextState.relayProp !== this.state.relayProp) {\n        return true;\n      } // Otherwise, for convenience short-circuit if all non-Relay props\n      // are scalar and equal\n\n\n      var keys = Object.keys(nextProps);\n\n      for (var ii = 0; ii < keys.length; ii++) {\n        var _key = keys[ii];\n\n        if (_key === '__relayContext') {\n          if (this.state.prevPropsContext.environment !== nextState.prevPropsContext.environment) {\n            return true;\n          }\n        } else {\n          if (!fragments.hasOwnProperty(_key) && !isScalarAndEqual(nextProps[_key], this.props[_key])) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    };\n\n    _proto._subscribeToNewResolver = function _subscribeToNewResolver() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          resolver = _this$state.resolver; // Event listeners are only safe to add during the commit phase,\n      // So they won't leak if render is interrupted or errors.\n\n      resolver.setCallback(this._handleFragmentDataUpdate); // External values could change between render and commit.\n      // Check for this case, even though it requires an extra store read.\n\n      var maybeNewData = resolver.resolve();\n\n      if (data !== maybeNewData) {\n        this.setState({\n          data: maybeNewData\n        });\n      }\n    }\n    /**\n     * Render new data for the existing props/context.\n     */\n    ;\n\n    _proto._getFragmentVariables = function _getFragmentVariables() {\n      return getVariablesFromObject(fragments, this.props);\n    };\n\n    _proto._getQueryFetcher = function _getQueryFetcher() {\n      if (!this._queryFetcher) {\n        this._queryFetcher = new ReactRelayQueryFetcher();\n      }\n\n      return this._queryFetcher;\n    };\n\n    _proto.render = function render() {\n      var _this$props = this.props,\n          componentRef = _this$props.componentRef,\n          __relayContext = _this$props.__relayContext,\n          __rootIsQueryRenderer = _this$props.__rootIsQueryRenderer,\n          props = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props, [\"componentRef\", \"__relayContext\", \"__rootIsQueryRenderer\"]);\n      var _this$state2 = this.state,\n          relayProp = _this$state2.relayProp,\n          contextForChildren = _this$state2.contextForChildren;\n      return /*#__PURE__*/React.createElement(ReactRelayContext.Provider, {\n        value: contextForChildren\n      }, /*#__PURE__*/React.createElement(Component, (0, _extends2[\"default\"])({}, props, this.state.data, {\n        ref: componentRef,\n        relay: relayProp\n      })));\n    };\n\n    return _class;\n  }(React.Component), (0, _defineProperty2[\"default\"])(_class, \"displayName\", containerName), _temp;\n}\n\nfunction getRelayProp(environment, refetch) {\n  return {\n    environment: environment,\n    refetch: refetch\n  };\n}\n/**\n * Wrap the basic `createContainer()` function with logic to adapt to the\n * `context.relay.environment` in which it is rendered. Specifically, the\n * extraction of the environment-specific version of fragments in the\n * `fragmentSpec` is memoized once per environment, rather than once per\n * instance of the container constructed/rendered.\n */\n\n\nfunction createContainer(Component, fragmentSpec, taggedNode) {\n  // $FlowFixMe[incompatible-return]\n  return buildReactRelayContainer(Component, fragmentSpec, function (ComponentClass, fragments) {\n    return createContainerWithFragments(ComponentClass, fragments, taggedNode);\n  });\n}\n\nmodule.exports = {\n  createContainer: createContainer\n};"]},"metadata":{},"sourceType":"script"}