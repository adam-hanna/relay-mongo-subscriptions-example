{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar invariant = require('invariant');\n\nvar stableCopy = require('../util/stableCopy');\n/**\n * A cache for storing query responses, featuring:\n * - `get` with TTL\n * - cache size limiting, with least-recently *updated* entries purged first\n */\n\n\nvar RelayQueryResponseCache = /*#__PURE__*/function () {\n  function RelayQueryResponseCache(_ref) {\n    var size = _ref.size,\n        ttl = _ref.ttl;\n    !(size > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayQueryResponseCache: Expected the max cache size to be > 0, got ' + '`%s`.', size) : invariant(false) : void 0;\n    !(ttl > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayQueryResponseCache: Expected the max ttl to be > 0, got `%s`.', ttl) : invariant(false) : void 0;\n    this._responses = new Map();\n    this._size = size;\n    this._ttl = ttl;\n  }\n\n  var _proto = RelayQueryResponseCache.prototype;\n\n  _proto.clear = function clear() {\n    this._responses.clear();\n  };\n\n  _proto.get = function get(queryID, variables) {\n    var _this = this;\n\n    var cacheKey = getCacheKey(queryID, variables);\n\n    this._responses.forEach(function (response, key) {\n      if (!isCurrent(response.fetchTime, _this._ttl)) {\n        _this._responses[\"delete\"](key);\n      }\n    });\n\n    var response = this._responses.get(cacheKey);\n\n    return response != null ? // $FlowFixMe[speculation-ambiguous]\n    (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, response.payload), {}, {\n      extensions: (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, response.payload.extensions), {}, {\n        cacheTimestamp: response.fetchTime\n      })\n    }) : null;\n  };\n\n  _proto.set = function set(queryID, variables, payload) {\n    var fetchTime = Date.now();\n    var cacheKey = getCacheKey(queryID, variables);\n\n    this._responses[\"delete\"](cacheKey); // deletion resets key ordering\n\n\n    this._responses.set(cacheKey, {\n      fetchTime: fetchTime,\n      payload: payload\n    }); // Purge least-recently updated key when max size reached\n\n\n    if (this._responses.size > this._size) {\n      var firstKey = this._responses.keys().next();\n\n      if (!firstKey.done) {\n        this._responses[\"delete\"](firstKey.value);\n      }\n    }\n  };\n\n  return RelayQueryResponseCache;\n}();\n\nfunction getCacheKey(queryID, variables) {\n  return JSON.stringify(stableCopy({\n    queryID: queryID,\n    variables: variables\n  }));\n}\n/**\n * Determine whether a response fetched at `fetchTime` is still valid given\n * some `ttl`.\n */\n\n\nfunction isCurrent(fetchTime, ttl) {\n  return fetchTime + ttl >= Date.now();\n}\n\nmodule.exports = RelayQueryResponseCache;","map":{"version":3,"sources":["/home/adamhanna/apps/relay-mongo-subscriptions-example/client/node_modules/relay-runtime/lib/network/RelayQueryResponseCache.js"],"names":["_interopRequireDefault","require","_objectSpread2","invariant","stableCopy","RelayQueryResponseCache","_ref","size","ttl","process","env","NODE_ENV","_responses","Map","_size","_ttl","_proto","prototype","clear","get","queryID","variables","_this","cacheKey","getCacheKey","forEach","response","key","isCurrent","fetchTime","payload","extensions","cacheTimestamp","set","Date","now","firstKey","keys","next","done","value","JSON","stringify","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar invariant = require('invariant');\n\nvar stableCopy = require('../util/stableCopy');\n\n/**\n * A cache for storing query responses, featuring:\n * - `get` with TTL\n * - cache size limiting, with least-recently *updated* entries purged first\n */\nvar RelayQueryResponseCache = /*#__PURE__*/function () {\n  function RelayQueryResponseCache(_ref) {\n    var size = _ref.size,\n        ttl = _ref.ttl;\n    !(size > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayQueryResponseCache: Expected the max cache size to be > 0, got ' + '`%s`.', size) : invariant(false) : void 0;\n    !(ttl > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayQueryResponseCache: Expected the max ttl to be > 0, got `%s`.', ttl) : invariant(false) : void 0;\n    this._responses = new Map();\n    this._size = size;\n    this._ttl = ttl;\n  }\n\n  var _proto = RelayQueryResponseCache.prototype;\n\n  _proto.clear = function clear() {\n    this._responses.clear();\n  };\n\n  _proto.get = function get(queryID, variables) {\n    var _this = this;\n\n    var cacheKey = getCacheKey(queryID, variables);\n\n    this._responses.forEach(function (response, key) {\n      if (!isCurrent(response.fetchTime, _this._ttl)) {\n        _this._responses[\"delete\"](key);\n      }\n    });\n\n    var response = this._responses.get(cacheKey);\n\n    return response != null ? // $FlowFixMe[speculation-ambiguous]\n    (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, response.payload), {}, {\n      extensions: (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, response.payload.extensions), {}, {\n        cacheTimestamp: response.fetchTime\n      })\n    }) : null;\n  };\n\n  _proto.set = function set(queryID, variables, payload) {\n    var fetchTime = Date.now();\n    var cacheKey = getCacheKey(queryID, variables);\n\n    this._responses[\"delete\"](cacheKey); // deletion resets key ordering\n\n\n    this._responses.set(cacheKey, {\n      fetchTime: fetchTime,\n      payload: payload\n    }); // Purge least-recently updated key when max size reached\n\n\n    if (this._responses.size > this._size) {\n      var firstKey = this._responses.keys().next();\n\n      if (!firstKey.done) {\n        this._responses[\"delete\"](firstKey.value);\n      }\n    }\n  };\n\n  return RelayQueryResponseCache;\n}();\n\nfunction getCacheKey(queryID, variables) {\n  return JSON.stringify(stableCopy({\n    queryID: queryID,\n    variables: variables\n  }));\n}\n/**\n * Determine whether a response fetched at `fetchTime` is still valid given\n * some `ttl`.\n */\n\n\nfunction isCurrent(fetchTime, ttl) {\n  return fetchTime + ttl >= Date.now();\n}\n\nmodule.exports = RelayQueryResponseCache;"]},"metadata":{},"sourceType":"script"}