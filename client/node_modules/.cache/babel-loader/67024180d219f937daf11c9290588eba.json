{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = require('react');\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar buildReactRelayContainer = require('./buildReactRelayContainer');\n\nvar getRootVariablesForFragments = require('./getRootVariablesForFragments');\n\nvar _require = require('./ReactRelayContainerUtils'),\n    getContainerName = _require.getContainerName;\n\nvar _require2 = require('./RelayContext'),\n    assertRelayContext = _require2.assertRelayContext;\n\nvar _require3 = require('relay-runtime'),\n    createFragmentSpecResolver = _require3.createFragmentSpecResolver,\n    getDataIDsFromObject = _require3.getDataIDsFromObject,\n    isScalarAndEqual = _require3.isScalarAndEqual;\n/**\n * Composes a React component class, returning a new class that intercepts\n * props, resolving them with the provided fragments and subscribing for\n * updates.\n */\n\n\nfunction createContainerWithFragments(Component, fragments) {\n  var _class, _temp;\n\n  var containerName = getContainerName(Component);\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    (0, _inheritsLoose2[\"default\"])(_class, _React$Component);\n\n    function _class(props) {\n      var _props$__rootIsQueryR, _this;\n\n      _this = _React$Component.call(this, props) || this;\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_handleFragmentDataUpdate\", function () {\n        var resolverFromThisUpdate = _this.state.resolver;\n\n        _this.setState(function (updatedState) {\n          return (// If this event belongs to the current data source, update.\n            // Otherwise we should ignore it.\n            resolverFromThisUpdate === updatedState.resolver ? {\n              data: updatedState.resolver.resolve(),\n              relayProp: getRelayProp(updatedState.relayProp.environment)\n            } : null\n          );\n        });\n      });\n      var relayContext = assertRelayContext(props.__relayContext);\n      var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== void 0 ? _props$__rootIsQueryR : false; // Do not provide a subscription/callback here.\n      // It is possible for this render to be interrupted or aborted,\n      // In which case the subscription would cause a leak.\n      // We will add the subscription in componentDidMount().\n\n      var resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);\n      _this.state = {\n        data: resolver.resolve(),\n        prevProps: props,\n        prevPropsContext: relayContext,\n        relayProp: getRelayProp(relayContext.environment),\n        resolver: resolver\n      };\n      return _this;\n    }\n    /**\n     * When new props are received, read data for the new props and subscribe\n     * for updates. Props may be the same in which case previous data and\n     * subscriptions can be reused.\n     */\n\n\n    _class.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$__rootIsQu; // Any props change could impact the query, so we mirror props in state.\n      // This is an unusual pattern, but necessary for this container usecase.\n\n\n      var prevProps = prevState.prevProps;\n      var relayContext = assertRelayContext(nextProps.__relayContext);\n      var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== void 0 ? _nextProps$__rootIsQu : false;\n      var prevIDs = getDataIDsFromObject(fragments, prevProps);\n      var nextIDs = getDataIDsFromObject(fragments, nextProps);\n      var resolver = prevState.resolver; // If the environment has changed or props point to new records then\n      // previously fetched data and any pending fetches no longer apply:\n      // - Existing references are on the old environment.\n      // - Existing references are based on old variables.\n      // - Pending fetches are for the previous records.\n\n      if (prevState.prevPropsContext.environment !== relayContext.environment || !areEqual(prevIDs, nextIDs)) {\n        // Do not provide a subscription/callback here.\n        // It is possible for this render to be interrupted or aborted,\n        // In which case the subscription would cause a leak.\n        // We will add the subscription in componentDidUpdate().\n        resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);\n        return {\n          data: resolver.resolve(),\n          prevPropsContext: relayContext,\n          prevProps: nextProps,\n          relayProp: getRelayProp(relayContext.environment),\n          resolver: resolver\n        };\n      } else {\n        resolver.setProps(nextProps);\n        var data = resolver.resolve();\n\n        if (data !== prevState.data) {\n          return {\n            data: data,\n            prevProps: nextProps,\n            prevPropsContext: relayContext,\n            relayProp: getRelayProp(relayContext.environment)\n          };\n        }\n      }\n\n      return null;\n    };\n\n    var _proto = _class.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      this._subscribeToNewResolver();\n\n      this._rerenderIfStoreHasChanged();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n      if (this.state.resolver !== prevState.resolver) {\n        prevState.resolver.dispose();\n\n        this._subscribeToNewResolver();\n      }\n\n      this._rerenderIfStoreHasChanged();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this.state.resolver.dispose();\n    };\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n      // Short-circuit if any Relay-related data has changed\n      if (nextState.data !== this.state.data) {\n        return true;\n      } // Otherwise, for convenience short-circuit if all non-Relay props\n      // are scalar and equal\n\n\n      var keys = Object.keys(nextProps);\n\n      for (var ii = 0; ii < keys.length; ii++) {\n        var _key = keys[ii];\n\n        if (_key === '__relayContext') {\n          if (nextState.prevPropsContext.environment !== this.state.prevPropsContext.environment) {\n            return true;\n          }\n        } else {\n          if (!fragments.hasOwnProperty(_key) && !isScalarAndEqual(nextProps[_key], this.props[_key])) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Render new data for the existing props/context.\n     */\n    ;\n\n    _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          resolver = _this$state.resolver; // External values could change between render and commit.\n      // Check for this case, even though it requires an extra store read.\n\n      var maybeNewData = resolver.resolve();\n\n      if (data !== maybeNewData) {\n        this.setState({\n          data: maybeNewData\n        });\n      }\n    };\n\n    _proto._subscribeToNewResolver = function _subscribeToNewResolver() {\n      var resolver = this.state.resolver; // Event listeners are only safe to add during the commit phase,\n      // So they won't leak if render is interrupted or errors.\n\n      resolver.setCallback(this._handleFragmentDataUpdate);\n    };\n\n    _proto.render = function render() {\n      var _this$props = this.props,\n          componentRef = _this$props.componentRef,\n          __relayContext = _this$props.__relayContext,\n          __rootIsQueryRenderer = _this$props.__rootIsQueryRenderer,\n          props = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props, [\"componentRef\", \"__relayContext\", \"__rootIsQueryRenderer\"]);\n      return React.createElement(Component, (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, props), this.state.data), {}, {\n        ref: componentRef,\n        relay: this.state.relayProp\n      }));\n    };\n\n    return _class;\n  }(React.Component), (0, _defineProperty2[\"default\"])(_class, \"displayName\", containerName), _temp;\n}\n\nfunction getRelayProp(environment) {\n  return {\n    environment: environment\n  };\n}\n/**\n * Wrap the basic `createContainer()` function with logic to adapt to the\n * `context.relay.environment` in which it is rendered. Specifically, the\n * extraction of the environment-specific version of fragments in the\n * `fragmentSpec` is memoized once per environment, rather than once per\n * instance of the container constructed/rendered.\n */\n\n\nfunction createContainer(Component, fragmentSpec) {\n  // $FlowFixMe[incompatible-return]\n  return buildReactRelayContainer(Component, fragmentSpec, createContainerWithFragments);\n}\n\nmodule.exports = {\n  createContainer: createContainer\n};","map":{"version":3,"sources":["/home/adamhanna/apps/relay-mongo-subscriptions-example/client/node_modules/react-relay/lib/ReactRelayFragmentContainer.js"],"names":["_interopRequireDefault","require","_objectSpread2","_objectWithoutPropertiesLoose2","_assertThisInitialized2","_inheritsLoose2","_defineProperty2","React","areEqual","buildReactRelayContainer","getRootVariablesForFragments","_require","getContainerName","_require2","assertRelayContext","_require3","createFragmentSpecResolver","getDataIDsFromObject","isScalarAndEqual","createContainerWithFragments","Component","fragments","_class","_temp","containerName","_React$Component","props","_props$__rootIsQueryR","_this","call","resolverFromThisUpdate","state","resolver","setState","updatedState","data","resolve","relayProp","getRelayProp","environment","relayContext","__relayContext","rootIsQueryRenderer","__rootIsQueryRenderer","prevProps","prevPropsContext","getDerivedStateFromProps","nextProps","prevState","_nextProps$__rootIsQu","prevIDs","nextIDs","setProps","_proto","prototype","componentDidMount","_subscribeToNewResolver","_rerenderIfStoreHasChanged","componentDidUpdate","dispose","componentWillUnmount","shouldComponentUpdate","nextState","keys","Object","ii","length","_key","hasOwnProperty","_this$state","maybeNewData","setCallback","_handleFragmentDataUpdate","render","_this$props","componentRef","createElement","ref","relay","createContainer","fragmentSpec","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar React = require('react');\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar buildReactRelayContainer = require('./buildReactRelayContainer');\n\nvar getRootVariablesForFragments = require('./getRootVariablesForFragments');\n\nvar _require = require('./ReactRelayContainerUtils'),\n    getContainerName = _require.getContainerName;\n\nvar _require2 = require('./RelayContext'),\n    assertRelayContext = _require2.assertRelayContext;\n\nvar _require3 = require('relay-runtime'),\n    createFragmentSpecResolver = _require3.createFragmentSpecResolver,\n    getDataIDsFromObject = _require3.getDataIDsFromObject,\n    isScalarAndEqual = _require3.isScalarAndEqual;\n\n/**\n * Composes a React component class, returning a new class that intercepts\n * props, resolving them with the provided fragments and subscribing for\n * updates.\n */\nfunction createContainerWithFragments(Component, fragments) {\n  var _class, _temp;\n\n  var containerName = getContainerName(Component);\n  return _temp = _class = /*#__PURE__*/function (_React$Component) {\n    (0, _inheritsLoose2[\"default\"])(_class, _React$Component);\n\n    function _class(props) {\n      var _props$__rootIsQueryR, _this;\n\n      _this = _React$Component.call(this, props) || this;\n      (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"_handleFragmentDataUpdate\", function () {\n        var resolverFromThisUpdate = _this.state.resolver;\n\n        _this.setState(function (updatedState) {\n          return (// If this event belongs to the current data source, update.\n            // Otherwise we should ignore it.\n            resolverFromThisUpdate === updatedState.resolver ? {\n              data: updatedState.resolver.resolve(),\n              relayProp: getRelayProp(updatedState.relayProp.environment)\n            } : null\n          );\n        });\n      });\n      var relayContext = assertRelayContext(props.__relayContext);\n      var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== void 0 ? _props$__rootIsQueryR : false; // Do not provide a subscription/callback here.\n      // It is possible for this render to be interrupted or aborted,\n      // In which case the subscription would cause a leak.\n      // We will add the subscription in componentDidMount().\n\n      var resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);\n      _this.state = {\n        data: resolver.resolve(),\n        prevProps: props,\n        prevPropsContext: relayContext,\n        relayProp: getRelayProp(relayContext.environment),\n        resolver: resolver\n      };\n      return _this;\n    }\n    /**\n     * When new props are received, read data for the new props and subscribe\n     * for updates. Props may be the same in which case previous data and\n     * subscriptions can be reused.\n     */\n\n\n    _class.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$__rootIsQu;\n\n      // Any props change could impact the query, so we mirror props in state.\n      // This is an unusual pattern, but necessary for this container usecase.\n      var prevProps = prevState.prevProps;\n      var relayContext = assertRelayContext(nextProps.__relayContext);\n      var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== void 0 ? _nextProps$__rootIsQu : false;\n      var prevIDs = getDataIDsFromObject(fragments, prevProps);\n      var nextIDs = getDataIDsFromObject(fragments, nextProps);\n      var resolver = prevState.resolver; // If the environment has changed or props point to new records then\n      // previously fetched data and any pending fetches no longer apply:\n      // - Existing references are on the old environment.\n      // - Existing references are based on old variables.\n      // - Pending fetches are for the previous records.\n\n      if (prevState.prevPropsContext.environment !== relayContext.environment || !areEqual(prevIDs, nextIDs)) {\n        // Do not provide a subscription/callback here.\n        // It is possible for this render to be interrupted or aborted,\n        // In which case the subscription would cause a leak.\n        // We will add the subscription in componentDidUpdate().\n        resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);\n        return {\n          data: resolver.resolve(),\n          prevPropsContext: relayContext,\n          prevProps: nextProps,\n          relayProp: getRelayProp(relayContext.environment),\n          resolver: resolver\n        };\n      } else {\n        resolver.setProps(nextProps);\n        var data = resolver.resolve();\n\n        if (data !== prevState.data) {\n          return {\n            data: data,\n            prevProps: nextProps,\n            prevPropsContext: relayContext,\n            relayProp: getRelayProp(relayContext.environment)\n          };\n        }\n      }\n\n      return null;\n    };\n\n    var _proto = _class.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      this._subscribeToNewResolver();\n\n      this._rerenderIfStoreHasChanged();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n      if (this.state.resolver !== prevState.resolver) {\n        prevState.resolver.dispose();\n\n        this._subscribeToNewResolver();\n      }\n\n      this._rerenderIfStoreHasChanged();\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this.state.resolver.dispose();\n    };\n\n    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n      // Short-circuit if any Relay-related data has changed\n      if (nextState.data !== this.state.data) {\n        return true;\n      } // Otherwise, for convenience short-circuit if all non-Relay props\n      // are scalar and equal\n\n\n      var keys = Object.keys(nextProps);\n\n      for (var ii = 0; ii < keys.length; ii++) {\n        var _key = keys[ii];\n\n        if (_key === '__relayContext') {\n          if (nextState.prevPropsContext.environment !== this.state.prevPropsContext.environment) {\n            return true;\n          }\n        } else {\n          if (!fragments.hasOwnProperty(_key) && !isScalarAndEqual(nextProps[_key], this.props[_key])) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Render new data for the existing props/context.\n     */\n    ;\n\n    _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          resolver = _this$state.resolver; // External values could change between render and commit.\n      // Check for this case, even though it requires an extra store read.\n\n      var maybeNewData = resolver.resolve();\n\n      if (data !== maybeNewData) {\n        this.setState({\n          data: maybeNewData\n        });\n      }\n    };\n\n    _proto._subscribeToNewResolver = function _subscribeToNewResolver() {\n      var resolver = this.state.resolver; // Event listeners are only safe to add during the commit phase,\n      // So they won't leak if render is interrupted or errors.\n\n      resolver.setCallback(this._handleFragmentDataUpdate);\n    };\n\n    _proto.render = function render() {\n      var _this$props = this.props,\n          componentRef = _this$props.componentRef,\n          __relayContext = _this$props.__relayContext,\n          __rootIsQueryRenderer = _this$props.__rootIsQueryRenderer,\n          props = (0, _objectWithoutPropertiesLoose2[\"default\"])(_this$props, [\"componentRef\", \"__relayContext\", \"__rootIsQueryRenderer\"]);\n      return React.createElement(Component, (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, props), this.state.data), {}, {\n        ref: componentRef,\n        relay: this.state.relayProp\n      }));\n    };\n\n    return _class;\n  }(React.Component), (0, _defineProperty2[\"default\"])(_class, \"displayName\", containerName), _temp;\n}\n\nfunction getRelayProp(environment) {\n  return {\n    environment: environment\n  };\n}\n/**\n * Wrap the basic `createContainer()` function with logic to adapt to the\n * `context.relay.environment` in which it is rendered. Specifically, the\n * extraction of the environment-specific version of fragments in the\n * `fragmentSpec` is memoized once per environment, rather than once per\n * instance of the container constructed/rendered.\n */\n\n\nfunction createContainer(Component, fragmentSpec) {\n  // $FlowFixMe[incompatible-return]\n  return buildReactRelayContainer(Component, fragmentSpec, createContainerWithFragments);\n}\n\nmodule.exports = {\n  createContainer: createContainer\n};"]},"metadata":{},"sourceType":"script"}