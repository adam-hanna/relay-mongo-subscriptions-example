{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar RelayConcreteNode = require('../util/RelayConcreteNode');\n\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar RelayStoreReactFlightUtils = require('./RelayStoreReactFlightUtils');\n\nvar RelayStoreUtils = require('./RelayStoreUtils');\n\nvar cloneRelayHandleSourceField = require('./cloneRelayHandleSourceField');\n\nvar getOperation = require('../util/getOperation');\n\nvar invariant = require('invariant');\n\nvar _require = require('./TypeID'),\n    generateTypeID = _require.generateTypeID;\n\nvar CONDITION = RelayConcreteNode.CONDITION,\n    CLIENT_COMPONENT = RelayConcreteNode.CLIENT_COMPONENT,\n    CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION,\n    DEFER = RelayConcreteNode.DEFER,\n    FLIGHT_FIELD = RelayConcreteNode.FLIGHT_FIELD,\n    FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD,\n    INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT,\n    LINKED_FIELD = RelayConcreteNode.LINKED_FIELD,\n    MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT,\n    LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE,\n    SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD,\n    SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE,\n    STREAM = RelayConcreteNode.STREAM,\n    TYPE_DISCRIMINATOR = RelayConcreteNode.TYPE_DISCRIMINATOR;\nvar ROOT_ID = RelayStoreUtils.ROOT_ID,\n    getStorageKey = RelayStoreUtils.getStorageKey,\n    getModuleOperationKey = RelayStoreUtils.getModuleOperationKey;\n\nfunction mark(recordSource, selector, references, operationLoader, shouldProcessClientComponents) {\n  var dataID = selector.dataID,\n      node = selector.node,\n      variables = selector.variables;\n  var marker = new RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents);\n  marker.mark(node, dataID);\n}\n/**\n * @private\n */\n\n\nvar RelayReferenceMarker = /*#__PURE__*/function () {\n  function RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents) {\n    this._operationLoader = operationLoader !== null && operationLoader !== void 0 ? operationLoader : null;\n    this._operationName = null;\n    this._recordSource = recordSource;\n    this._references = references;\n    this._variables = variables;\n    this._shouldProcessClientComponents = shouldProcessClientComponents;\n  }\n\n  var _proto = RelayReferenceMarker.prototype;\n\n  _proto.mark = function mark(node, dataID) {\n    if (node.kind === 'Operation' || node.kind === 'SplitOperation') {\n      this._operationName = node.name;\n    }\n\n    this._traverse(node, dataID);\n  };\n\n  _proto._traverse = function _traverse(node, dataID) {\n    this._references.add(dataID);\n\n    var record = this._recordSource.get(dataID);\n\n    if (record == null) {\n      return;\n    }\n\n    this._traverseSelections(node.selections, record);\n  };\n\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker(): Undefined variable `%s`.', name) : invariant(false) : void 0; // $FlowFixMe[cannot-write]\n\n    return this._variables[name];\n  };\n\n  _proto._traverseSelections = function _traverseSelections(selections, record) {\n    var _this = this;\n\n    selections.forEach(function (selection) {\n      /* eslint-disable no-fallthrough */\n      switch (selection.kind) {\n        case LINKED_FIELD:\n          if (selection.plural) {\n            _this._traversePluralLink(selection, record);\n          } else {\n            _this._traverseLink(selection, record);\n          }\n\n          break;\n\n        case CONDITION:\n          var conditionValue = _this._getVariableValue(selection.condition);\n\n          if (conditionValue === selection.passingValue) {\n            _this._traverseSelections(selection.selections, record);\n          }\n\n          break;\n\n        case INLINE_FRAGMENT:\n          if (selection.abstractKey == null) {\n            var typeName = RelayModernRecord.getType(record);\n\n            if (typeName != null && typeName === selection.type) {\n              _this._traverseSelections(selection.selections, record);\n            }\n          } else if (RelayFeatureFlags.ENABLE_PRECISE_TYPE_REFINEMENT) {\n            var _typeName = RelayModernRecord.getType(record);\n\n            var typeID = generateTypeID(_typeName);\n\n            _this._references.add(typeID);\n\n            _this._traverseSelections(selection.selections, record);\n          } else {\n            _this._traverseSelections(selection.selections, record);\n          }\n\n          break;\n        // $FlowFixMe[incompatible-type]\n\n        case FRAGMENT_SPREAD:\n          _this._traverseSelections(selection.fragment.selections, record);\n\n          break;\n\n        case LINKED_HANDLE:\n          // The selections for a \"handle\" field are the same as those of the\n          // original linked field where the handle was applied. Reference marking\n          // therefore requires traversing the original field selections against\n          // the synthesized client field.\n          //\n          // TODO: Instead of finding the source field in `selections`, change\n          // the concrete structure to allow shared subtrees, and have the linked\n          // handle directly refer to the same selections as the LinkedField that\n          // it was split from.\n          var handleField = cloneRelayHandleSourceField(selection, selections, _this._variables);\n\n          if (handleField.plural) {\n            _this._traversePluralLink(handleField, record);\n          } else {\n            _this._traverseLink(handleField, record);\n          }\n\n          break;\n\n        case DEFER:\n        case STREAM:\n          _this._traverseSelections(selection.selections, record);\n\n          break;\n\n        case SCALAR_FIELD:\n        case SCALAR_HANDLE:\n          break;\n\n        case TYPE_DISCRIMINATOR:\n          {\n            if (RelayFeatureFlags.ENABLE_PRECISE_TYPE_REFINEMENT) {\n              var _typeName2 = RelayModernRecord.getType(record);\n\n              var _typeID = generateTypeID(_typeName2);\n\n              _this._references.add(_typeID);\n            }\n\n            break;\n          }\n\n        case MODULE_IMPORT:\n          _this._traverseModuleImport(selection, record);\n\n          break;\n\n        case CLIENT_EXTENSION:\n          _this._traverseSelections(selection.selections, record);\n\n          break;\n\n        case FLIGHT_FIELD:\n          if (RelayFeatureFlags.ENABLE_REACT_FLIGHT_COMPONENT_FIELD) {\n            _this._traverseFlightField(selection, record);\n          } else {\n            throw new Error('Flight fields are not yet supported.');\n          }\n\n          break;\n\n        case CLIENT_COMPONENT:\n          if (_this._shouldProcessClientComponents === false) {\n            break;\n          }\n\n          _this._traverseSelections(selection.fragment.selections, record);\n\n          break;\n\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker: Unknown AST node `%s`.', selection) : invariant(false) : void 0;\n      }\n    });\n  };\n\n  _proto._traverseModuleImport = function _traverseModuleImport(moduleImport, record) {\n    var _this$_operationName;\n\n    var operationLoader = this._operationLoader;\n    !(operationLoader !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker: Expected an operationLoader to be configured when using `@module`. ' + 'Could not load fragment `%s` in operation `%s`.', moduleImport.fragmentName, (_this$_operationName = this._operationName) !== null && _this$_operationName !== void 0 ? _this$_operationName : '(unknown)') : invariant(false) : void 0;\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = RelayModernRecord.getValue(record, operationKey);\n\n    if (operationReference == null) {\n      return;\n    }\n\n    var normalizationRootNode = operationLoader.get(operationReference);\n\n    if (normalizationRootNode != null) {\n      var selections = getOperation(normalizationRootNode).selections;\n\n      this._traverseSelections(selections, record);\n    } // Otherwise, if the operation is not available, we assume that the data\n    // cannot have been processed yet and therefore isn't in the store to\n    // begin with.\n\n  };\n\n  _proto._traverseLink = function _traverseLink(field, record) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n\n    if (linkedID == null) {\n      return;\n    }\n\n    this._traverse(field, linkedID);\n  };\n\n  _proto._traversePluralLink = function _traversePluralLink(field, record) {\n    var _this2 = this;\n\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n\n    if (linkedIDs == null) {\n      return;\n    }\n\n    linkedIDs.forEach(function (linkedID) {\n      if (linkedID != null) {\n        _this2._traverse(field, linkedID);\n      }\n    });\n  };\n\n  _proto._traverseFlightField = function _traverseFlightField(field, record) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n\n    if (linkedID == null) {\n      return;\n    }\n\n    this._references.add(linkedID);\n\n    var reactFlightClientResponseRecord = this._recordSource.get(linkedID);\n\n    if (reactFlightClientResponseRecord == null) {\n      return;\n    }\n\n    var reachableExecutableDefinitions = RelayModernRecord.getValue(reactFlightClientResponseRecord, RelayStoreReactFlightUtils.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY);\n\n    if (!Array.isArray(reachableExecutableDefinitions)) {\n      return;\n    }\n\n    var operationLoader = this._operationLoader;\n    !(operationLoader !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DataChecker: Expected an operationLoader to be configured when using ' + 'React Flight') : invariant(false) : void 0; // In Flight, the variables that are in scope for reachable executable\n    // definitions aren't the same as what's in scope for the outer query.\n\n    var prevVariables = this._variables; // $FlowFixMe[incompatible-cast]\n\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(reachableExecutableDefinitions),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var definition = _step.value;\n        this._variables = definition.variables;\n        var operationReference = definition.module;\n        var normalizationRootNode = operationLoader.get(operationReference);\n\n        if (normalizationRootNode != null) {\n          var operation = getOperation(normalizationRootNode);\n\n          this._traverse(operation, ROOT_ID);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    this._variables = prevVariables;\n  };\n\n  return RelayReferenceMarker;\n}();\n\nmodule.exports = {\n  mark: mark\n};","map":{"version":3,"sources":["/home/adamhanna/apps/relay-mongo-subscriptions-example/client/node_modules/relay-runtime/lib/store/RelayReferenceMarker.js"],"names":["_interopRequireDefault","require","_createForOfIteratorHelper2","RelayConcreteNode","RelayFeatureFlags","RelayModernRecord","RelayStoreReactFlightUtils","RelayStoreUtils","cloneRelayHandleSourceField","getOperation","invariant","_require","generateTypeID","CONDITION","CLIENT_COMPONENT","CLIENT_EXTENSION","DEFER","FLIGHT_FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT","LINKED_FIELD","MODULE_IMPORT","LINKED_HANDLE","SCALAR_FIELD","SCALAR_HANDLE","STREAM","TYPE_DISCRIMINATOR","ROOT_ID","getStorageKey","getModuleOperationKey","mark","recordSource","selector","references","operationLoader","shouldProcessClientComponents","dataID","node","variables","marker","RelayReferenceMarker","_operationLoader","_operationName","_recordSource","_references","_variables","_shouldProcessClientComponents","_proto","prototype","kind","name","_traverse","add","record","get","_traverseSelections","selections","_getVariableValue","hasOwnProperty","process","env","NODE_ENV","_this","forEach","selection","plural","_traversePluralLink","_traverseLink","conditionValue","condition","passingValue","abstractKey","typeName","getType","type","ENABLE_PRECISE_TYPE_REFINEMENT","_typeName","typeID","fragment","handleField","_typeName2","_typeID","_traverseModuleImport","ENABLE_REACT_FLIGHT_COMPONENT_FIELD","_traverseFlightField","Error","moduleImport","_this$_operationName","fragmentName","operationKey","documentName","operationReference","getValue","normalizationRootNode","field","storageKey","linkedID","getLinkedRecordID","_this2","linkedIDs","getLinkedRecordIDs","reactFlightClientResponseRecord","reachableExecutableDefinitions","REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY","Array","isArray","prevVariables","_iterator","_step","s","n","done","definition","value","module","operation","err","e","f","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar RelayConcreteNode = require('../util/RelayConcreteNode');\n\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar RelayStoreReactFlightUtils = require('./RelayStoreReactFlightUtils');\n\nvar RelayStoreUtils = require('./RelayStoreUtils');\n\nvar cloneRelayHandleSourceField = require('./cloneRelayHandleSourceField');\n\nvar getOperation = require('../util/getOperation');\n\nvar invariant = require('invariant');\n\nvar _require = require('./TypeID'),\n    generateTypeID = _require.generateTypeID;\n\nvar CONDITION = RelayConcreteNode.CONDITION,\n    CLIENT_COMPONENT = RelayConcreteNode.CLIENT_COMPONENT,\n    CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION,\n    DEFER = RelayConcreteNode.DEFER,\n    FLIGHT_FIELD = RelayConcreteNode.FLIGHT_FIELD,\n    FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD,\n    INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT,\n    LINKED_FIELD = RelayConcreteNode.LINKED_FIELD,\n    MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT,\n    LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE,\n    SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD,\n    SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE,\n    STREAM = RelayConcreteNode.STREAM,\n    TYPE_DISCRIMINATOR = RelayConcreteNode.TYPE_DISCRIMINATOR;\nvar ROOT_ID = RelayStoreUtils.ROOT_ID,\n    getStorageKey = RelayStoreUtils.getStorageKey,\n    getModuleOperationKey = RelayStoreUtils.getModuleOperationKey;\n\nfunction mark(recordSource, selector, references, operationLoader, shouldProcessClientComponents) {\n  var dataID = selector.dataID,\n      node = selector.node,\n      variables = selector.variables;\n  var marker = new RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents);\n  marker.mark(node, dataID);\n}\n/**\n * @private\n */\n\n\nvar RelayReferenceMarker = /*#__PURE__*/function () {\n  function RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents) {\n    this._operationLoader = operationLoader !== null && operationLoader !== void 0 ? operationLoader : null;\n    this._operationName = null;\n    this._recordSource = recordSource;\n    this._references = references;\n    this._variables = variables;\n    this._shouldProcessClientComponents = shouldProcessClientComponents;\n  }\n\n  var _proto = RelayReferenceMarker.prototype;\n\n  _proto.mark = function mark(node, dataID) {\n    if (node.kind === 'Operation' || node.kind === 'SplitOperation') {\n      this._operationName = node.name;\n    }\n\n    this._traverse(node, dataID);\n  };\n\n  _proto._traverse = function _traverse(node, dataID) {\n    this._references.add(dataID);\n\n    var record = this._recordSource.get(dataID);\n\n    if (record == null) {\n      return;\n    }\n\n    this._traverseSelections(node.selections, record);\n  };\n\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker(): Undefined variable `%s`.', name) : invariant(false) : void 0; // $FlowFixMe[cannot-write]\n\n    return this._variables[name];\n  };\n\n  _proto._traverseSelections = function _traverseSelections(selections, record) {\n    var _this = this;\n\n    selections.forEach(function (selection) {\n      /* eslint-disable no-fallthrough */\n      switch (selection.kind) {\n        case LINKED_FIELD:\n          if (selection.plural) {\n            _this._traversePluralLink(selection, record);\n          } else {\n            _this._traverseLink(selection, record);\n          }\n\n          break;\n\n        case CONDITION:\n          var conditionValue = _this._getVariableValue(selection.condition);\n\n          if (conditionValue === selection.passingValue) {\n            _this._traverseSelections(selection.selections, record);\n          }\n\n          break;\n\n        case INLINE_FRAGMENT:\n          if (selection.abstractKey == null) {\n            var typeName = RelayModernRecord.getType(record);\n\n            if (typeName != null && typeName === selection.type) {\n              _this._traverseSelections(selection.selections, record);\n            }\n          } else if (RelayFeatureFlags.ENABLE_PRECISE_TYPE_REFINEMENT) {\n            var _typeName = RelayModernRecord.getType(record);\n\n            var typeID = generateTypeID(_typeName);\n\n            _this._references.add(typeID);\n\n            _this._traverseSelections(selection.selections, record);\n          } else {\n            _this._traverseSelections(selection.selections, record);\n          }\n\n          break;\n        // $FlowFixMe[incompatible-type]\n\n        case FRAGMENT_SPREAD:\n          _this._traverseSelections(selection.fragment.selections, record);\n\n          break;\n\n        case LINKED_HANDLE:\n          // The selections for a \"handle\" field are the same as those of the\n          // original linked field where the handle was applied. Reference marking\n          // therefore requires traversing the original field selections against\n          // the synthesized client field.\n          //\n          // TODO: Instead of finding the source field in `selections`, change\n          // the concrete structure to allow shared subtrees, and have the linked\n          // handle directly refer to the same selections as the LinkedField that\n          // it was split from.\n          var handleField = cloneRelayHandleSourceField(selection, selections, _this._variables);\n\n          if (handleField.plural) {\n            _this._traversePluralLink(handleField, record);\n          } else {\n            _this._traverseLink(handleField, record);\n          }\n\n          break;\n\n        case DEFER:\n        case STREAM:\n          _this._traverseSelections(selection.selections, record);\n\n          break;\n\n        case SCALAR_FIELD:\n        case SCALAR_HANDLE:\n          break;\n\n        case TYPE_DISCRIMINATOR:\n          {\n            if (RelayFeatureFlags.ENABLE_PRECISE_TYPE_REFINEMENT) {\n              var _typeName2 = RelayModernRecord.getType(record);\n\n              var _typeID = generateTypeID(_typeName2);\n\n              _this._references.add(_typeID);\n            }\n\n            break;\n          }\n\n        case MODULE_IMPORT:\n          _this._traverseModuleImport(selection, record);\n\n          break;\n\n        case CLIENT_EXTENSION:\n          _this._traverseSelections(selection.selections, record);\n\n          break;\n\n        case FLIGHT_FIELD:\n          if (RelayFeatureFlags.ENABLE_REACT_FLIGHT_COMPONENT_FIELD) {\n            _this._traverseFlightField(selection, record);\n          } else {\n            throw new Error('Flight fields are not yet supported.');\n          }\n\n          break;\n\n        case CLIENT_COMPONENT:\n          if (_this._shouldProcessClientComponents === false) {\n            break;\n          }\n\n          _this._traverseSelections(selection.fragment.selections, record);\n\n          break;\n\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker: Unknown AST node `%s`.', selection) : invariant(false) : void 0;\n      }\n    });\n  };\n\n  _proto._traverseModuleImport = function _traverseModuleImport(moduleImport, record) {\n    var _this$_operationName;\n\n    var operationLoader = this._operationLoader;\n    !(operationLoader !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker: Expected an operationLoader to be configured when using `@module`. ' + 'Could not load fragment `%s` in operation `%s`.', moduleImport.fragmentName, (_this$_operationName = this._operationName) !== null && _this$_operationName !== void 0 ? _this$_operationName : '(unknown)') : invariant(false) : void 0;\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = RelayModernRecord.getValue(record, operationKey);\n\n    if (operationReference == null) {\n      return;\n    }\n\n    var normalizationRootNode = operationLoader.get(operationReference);\n\n    if (normalizationRootNode != null) {\n      var selections = getOperation(normalizationRootNode).selections;\n\n      this._traverseSelections(selections, record);\n    } // Otherwise, if the operation is not available, we assume that the data\n    // cannot have been processed yet and therefore isn't in the store to\n    // begin with.\n\n  };\n\n  _proto._traverseLink = function _traverseLink(field, record) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n\n    if (linkedID == null) {\n      return;\n    }\n\n    this._traverse(field, linkedID);\n  };\n\n  _proto._traversePluralLink = function _traversePluralLink(field, record) {\n    var _this2 = this;\n\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n\n    if (linkedIDs == null) {\n      return;\n    }\n\n    linkedIDs.forEach(function (linkedID) {\n      if (linkedID != null) {\n        _this2._traverse(field, linkedID);\n      }\n    });\n  };\n\n  _proto._traverseFlightField = function _traverseFlightField(field, record) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n\n    if (linkedID == null) {\n      return;\n    }\n\n    this._references.add(linkedID);\n\n    var reactFlightClientResponseRecord = this._recordSource.get(linkedID);\n\n    if (reactFlightClientResponseRecord == null) {\n      return;\n    }\n\n    var reachableExecutableDefinitions = RelayModernRecord.getValue(reactFlightClientResponseRecord, RelayStoreReactFlightUtils.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY);\n\n    if (!Array.isArray(reachableExecutableDefinitions)) {\n      return;\n    }\n\n    var operationLoader = this._operationLoader;\n    !(operationLoader !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DataChecker: Expected an operationLoader to be configured when using ' + 'React Flight') : invariant(false) : void 0; // In Flight, the variables that are in scope for reachable executable\n    // definitions aren't the same as what's in scope for the outer query.\n\n    var prevVariables = this._variables; // $FlowFixMe[incompatible-cast]\n\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(reachableExecutableDefinitions),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var definition = _step.value;\n        this._variables = definition.variables;\n        var operationReference = definition.module;\n        var normalizationRootNode = operationLoader.get(operationReference);\n\n        if (normalizationRootNode != null) {\n          var operation = getOperation(normalizationRootNode);\n\n          this._traverse(operation, ROOT_ID);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    this._variables = prevVariables;\n  };\n\n  return RelayReferenceMarker;\n}();\n\nmodule.exports = {\n  mark: mark\n};"]},"metadata":{},"sourceType":"script"}