{"ast":null,"code":"var _TodosToggleTodoMutation,\n    _TodosQuery,\n    _jsxFileName = \"/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/Todos.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useRelayEnvironment } from 'react-relay/hooks';\nimport { commitMutation } from \"react-relay\";\nimport { QueryRenderer } from 'react-relay';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompleteTodoMutation = _TodosToggleTodoMutation !== void 0 ? _TodosToggleTodoMutation : (_TodosToggleTodoMutation = require(\"./__generated__/TodosToggleTodoMutation.graphql\"), _TodosToggleTodoMutation.hash && _TodosToggleTodoMutation.hash !== \"259bcfae18082146116520827dd6f0c4\" && console.error(\"The definition of 'TodosToggleTodoMutation' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _TodosToggleTodoMutation);\nexport const Todos = ({}) => {\n  _s();\n\n  const environment = useRelayEnvironment();\n\n  const toggleTodo = _id => {\n    commitMutation(environment, {\n      mutation: CompleteTodoMutation,\n      variables: {\n        _id\n      },\n      onCompleted: (_response, errors) => {\n        if (errors) {\n          console.error(errors);\n        }\n      },\n      onError: err => console.error(err)\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(QueryRenderer, {\n      environment: environment,\n      query: _TodosQuery !== void 0 ? _TodosQuery : (_TodosQuery = require(\"./__generated__/TodosQuery.graphql\"), _TodosQuery.hash && _TodosQuery.hash !== \"54e525435b384a469087ca7574e6d840\" && console.error(\"The definition of 'TodosQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.\"), _TodosQuery),\n      variables: {},\n      render: ({\n        error,\n        props\n      }) => {\n        if (error) {\n          console.error(error);\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [\"Error: \", error.message]\n          }, void 0, true);\n        }\n\n        if (!props) {\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: \"Loading...\"\n          }, void 0, false);\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Completed\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: props.todos.map((todo, idx) => {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => {\n                      toggleTodo(todo._id);\n                    },\n                    children: \"Toggle Complete\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: todo.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: todo.completed\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 100,\n                  columnNumber: 23\n                }, this)]\n              }, idx, true, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Todos, \"B7T1MoCmIcMFSAbaoXDAVKIbKg8=\", false, function () {\n  return [useRelayEnvironment];\n});\n\n_c = Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["/home/adamhanna/apps/relay-mongo-subscriptions-example/client/src/Todos.tsx"],"names":["React","useRelayEnvironment","commitMutation","QueryRenderer","CompleteTodoMutation","Todos","environment","toggleTodo","_id","mutation","variables","onCompleted","_response","errors","console","error","onError","err","props","message","todos","map","todo","idx","description","completed"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,QAAoC,mBAApC;AACA,SAASC,cAAT,QAA+B,aAA/B;AAEA,SACEC,aADF,QAEO,aAFP;;;AAOA,MAAMC,oBAAoB,scAA1B;AAgBA,OAAO,MAAMC,KAAK,GAAG,CAAC,EAAD,KAER;AAAA;;AACX,QAAMC,WAAW,GAAGL,mBAAmB,EAAvC;;AAEA,QAAMM,UAAU,GAAIC,GAAD,IAAiB;AAClCN,IAAAA,cAAc,CAACI,WAAD,EAAc;AAC1BG,MAAAA,QAAQ,EAAEL,oBADgB;AAE1BM,MAAAA,SAAS,EAAE;AACTF,QAAAA;AADS,OAFe;AAK1BG,MAAAA,WAAW,EAAE,CAACC,SAAD,EAAYC,MAAZ,KAAuB;AAClC,YAAIA,MAAJ,EAAY;AACVC,UAAAA,OAAO,CAACC,KAAR,CAAcF,MAAd;AACD;AACF,OATyB;AAU1BG,MAAAA,OAAO,EAAEC,GAAG,IAAIH,OAAO,CAACC,KAAR,CAAcE,GAAd;AAVU,KAAd,CAAd;AAYD,GAbD;;AAeA,sBACE;AAAA,2BACE,QAAC,aAAD;AACE,MAAA,WAAW,EAAEX,WADf;AAEE,MAAA,KAAK,6VAFP;AAWE,MAAA,SAAS,EAAE,EAXb;AAYE,MAAA,MAAM,EAAE,CAAC;AAAES,QAAAA,KAAF;AAASG,QAAAA;AAAT,OAAD,KAAsB;AAC5B,YAAIH,KAAJ,EAAW;AACTD,UAAAA,OAAO,CAACC,KAAR,CAAcA,KAAd;AACA,8BAAO;AAAA,kCAAUA,KAAK,CAACI,OAAhB;AAAA,0BAAP;AACD;;AAED,YAAI,CAACD,KAAL,EAAY;AACV,8BAAO;AAAA;AAAA,2BAAP;AACD;;AAED,4BACE;AAAA,kCACE;AAAA,mCACE;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAWE;AAAA,sBACIA,KAAD,CAA8BE,KAA9B,CAAoCC,GAApC,CAAwC,CAACC,IAAD,EAAOC,GAAP,KAAe;AACtD,kCACE;AAAA,wCAGE;AAAA,yCACE;AACE,oBAAA,OAAO,EAAE,MAAM;AACbhB,sBAAAA,UAAU,CAACe,IAAI,CAACd,GAAN,CAAV;AACD,qBAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,wBAHF,eAYE;AAAA,4BAAKc,IAAI,CAACE;AAAV;AAAA;AAAA;AAAA;AAAA,wBAZF,eAaE;AAAA,4BAAKF,IAAI,CAACG;AAAV;AAAA;AAAA;AAAA;AAAA,wBAbF;AAAA,iBACOF,GADP;AAAA;AAAA;AAAA;AAAA,sBADF;AAiBD,aAlBA;AADH;AAAA;AAAA;AAAA;AAAA,kBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AAmCD;AAzDH;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA+DD,CAnFM;;GAAMlB,K;UAGSJ,mB;;;KAHTI,K","sourcesContent":["import React from 'react'\nimport { useRelayEnvironment } from 'react-relay/hooks'\nimport { commitMutation } from \"react-relay\"\nimport graphql from 'babel-plugin-relay/macro'\nimport {\n  QueryRenderer,\n} from 'react-relay'\nimport {\n  TodosQueryResponse\n} from './__generated__/TodosQuery.graphql'\n\nconst CompleteTodoMutation = graphql`\n  mutation TodosToggleTodoMutation(\n    $_id: String!\n  ) {\n    toggleTodo(_id: $_id) {\n      _id\n      description\n      completed\n    }\n  }\n`\n\nexport type Props = {\n\n}\n\nexport const Todos = ({\n\n}: Props) => {\n  const environment = useRelayEnvironment()\n\n  const toggleTodo = (_id: string) => {\n    commitMutation(environment, {\n      mutation: CompleteTodoMutation,\n      variables: {\n        _id\n      },\n      onCompleted: (_response, errors) => {\n        if (errors) {\n          console.error(errors);\n        }\n      },\n      onError: err => console.error(err)\n    });\n  }\n\n  return (\n    <>\n      <QueryRenderer\n        environment={environment}\n        query={graphql`\n          query TodosQuery {\n            todos {\n              _id\n              description\n              completed\n            }\n          }\n        `}\n        variables={{}}\n        render={({ error, props }) => {\n          if (error) {\n            console.error(error)\n            return <>Error: {error.message}</>\n          }\n\n          if (!props) {\n            return <>Loading...</>\n          }\n\n          return (\n            <table>\n              <thead>\n                <tr>\n                  <th>\n                    Description\n                  </th>\n                  <th>\n                    Completed\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {(props as TodosQueryResponse).todos.map((todo, idx) => {\n                  return (\n                    <tr\n                      key={idx}\n                    >\n                      <td>\n                        <button\n                          onClick={() => {\n                            toggleTodo(todo._id)\n                          }}\n                        >\n                          Toggle Complete\n                        </button>\n                      </td>\n                      <td>{todo.description}</td>\n                      <td>{todo.completed}</td>\n                    </tr>\n                  )\n                })}\n              </tbody>\n            </table>\n          )\n        }}\n      />\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}